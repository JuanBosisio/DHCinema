Archivo: G:\Mochila\DH CTD 1er año\Proyecto Integrador\equipo-9\cine-front\src\App.jsx


import Navbar from './components/Header'
import Footer from './components/Footer'
import { Outlet } from 'react-router-dom'

function App() {

  return (

    <div className='app'>
      <Navbar />
      <div className='main-content'>
        <Outlet />
      </div>
      <Footer />
    </div>

  )
}

export default App


Archivo: G:\Mochila\DH CTD 1er año\Proyecto Integrador\equipo-9\cine-front\src\components\AdministrationPanel\multipleImageDrop.jsx

import { useState } from "react";
import { useDropzone } from "react-dropzone";
import Modal from "react-modal";

Modal.setAppElement('#root')

function MultipleImageDrop({galerry,setGallery}) {

  const [fileList, setFileList] = useState([]);
  const [imagePreview,setImagePreview] = useState('')
  const [showModal, setShowModal] = useState(false)

  const customStyles = {
    overlay: { zIndex: 20000 }
}

  const fileExtension = (extension) => {
    if (extension == 'jpg') {
      return '/icons/jpg-extension.svg'
    } else if (extension == 'png') {
      return '/icons/png-extension.svg'
    } else {
      return '/icons/file-extension.svg'
    }
  }

  const handleModal = () => {
    
    setShowModal(true)
  }

  const closeModal = () => {
    setShowModal(false)
  }

  const handleFileDrop = (acceptedFiles) => {
    const files = acceptedFiles.map((file) => ({
      name: file.name,
      preview: URL.createObjectURL(file),
      extension: fileExtension(file.name.split('.').pop()),
      file: file,
    }));

    setGallery((prevFileList) => [...prevFileList,...files])
    setFileList((prevFileList) => [...prevFileList, ...files]);
  };


  const removeFile = (index) => {
    setFileList((prevFileList) => {
      const updatedFileList = [...prevFileList];
      updatedFileList.splice(index, 1);
      return updatedFileList;
    });
  };

  const removeAll = () => {
    setFileList([])
  }



  const FileDropzone = () => {
    const { getRootProps, getInputProps, isDragActive } = useDropzone({
      onDrop: handleFileDrop,
      accept: {
        'image/*': ['.jpeg', '.jpg', '.png'],
      },
    });

    return (
      <div className="dropzone" {...getRootProps()}>
        <input {...getInputProps()} />
        {isDragActive ? (
          <div className="dropzone-info">
            <img src="/icons/drag-drop.svg" />
            <p>Suelta las imagenes aquí...</p>
          </div>
        ) : (
          <div className="dropzone-info">
            <img src="/icons/cloud.svg" />
            <p>Arrastra y suelta imagenes aquí, o haz clic para seleccionar imagenes.</p>
          </div>
        )}
      </div>
    );
  };

  const FilePreview = () => {
    return (
      Array.isArray(fileList) && fileList.length > 0 ? (fileList.map((file, index) => (
        <div className="extension-container" key={index}>
          <h4>{file.name}</h4>
          <img src={file.extension} alt="Extension" />
          <div className="extension-buttons" >
            <button className="show-button" onClick={()=>{
              setImagePreview(file.preview)
              handleModal()
            }}><img src='/icons/show.svg' /></button>
            <button className="delete-button" onClick={removeFile}><img src="/icons/delete.svg" /></button>
          </div>
        </div>
      ))) : (
        <div className="empty-files">
          <img src="/icons/empty.svg" />
          <h3>No hay archivos</h3>

        </div>)
    );
  }

  return (
    <div className="dropzone-container">
      <FileDropzone />
      <div className="extensions-preview">
        <FilePreview />
      </div>
      {Array.isArray(fileList) && fileList.length > 1 && (<button onClick={removeAll}>ELIMINAR TODOS</button>)}
      <Modal
        isOpen={showModal}
        onRequestClose={closeModal}
        className='modal'
        style={customStyles}
      >

        <div className="modal-image-conteiner">
          <div className="modal-image-content">

            <div className="detail-image-part">
              <img src="/icons/close.svg" onClick={closeModal} />
            </div>
            <div className="modal-image-preview">
              <img className="modal-object" src={imagePreview} />
            </div>

          </div>
        </div>
      </Modal>
    </div>
  );
}

export default MultipleImageDrop;

Archivo: G:\Mochila\DH CTD 1er año\Proyecto Integrador\equipo-9\cine-front\src\components\AdministrationPanel\singleImageDrop.jsx

import { useState } from "react";
import { useDropzone } from "react-dropzone";
import Modal from "react-modal";

Modal.setAppElement('#root')

function SingleImageDrop({ image, setImage }) {
    const [imageFile, setImageFile] = useState(null);
    const [imagePreview, setImagePreview] = useState('');
    const [imageExtension, setImageExtension] = useState('')
    const [showModal, setShowModal] = useState(false)

    const customStyles = {
        overlay: { zIndex: 20000 }
    }

    const handleModal = () => {
        setShowModal(true)
    }

    const closeModal = () => {
        setShowModal(false)
    }

    const handleImageDrop = (acceptedFiles) => {
        const file = acceptedFiles[0];
        if (file.name.split('.').pop() == 'jpg') {
            setImageExtension('/icons/jpg-extension.svg')
        } else if (file.name.split('.').pop() == 'png') {
            setImageExtension('/icons/png-extension.svg')
        } else {
            setImageExtension('/icons/file-extension.svg')
        }
        const reader = new FileReader();

        reader.onload = () => {
            setImageFile(file)
            setImage(file);
            setImagePreview(reader.result);
        };

        reader.readAsDataURL(file);
    };

    const removeImage = () => {
        setImageFile(null);
        setImagePreview('');
        setImageExtension('')
        setImage(null)
    };

    const ImageDropzone = () => {
        const { getRootProps, getInputProps, isDragActive } = useDropzone({
            onDrop: handleImageDrop,
            accept: {
                'image/*': ['.jpeg', '.jpg', '.png'],
            },
            maxFiles: 1,
        });

        return (
            <div className="dropzone" {...getRootProps()}>
                <input {...getInputProps()} />
                {isDragActive ? (
                    <div className="dropzone-info">
                        <img src="/icons/drag-drop.svg" />
                        <p>Suelta las imagenes aquí...</p>
                    </div>
                ) : (
                    <div className="dropzone-info">
                        <img src="/icons/cloud.svg" />
                        <p>Arrastra y suelta imagenes aquí, o haz clic para seleccionar imagenes.</p>
                    </div>
                )}
            </div>
        );
    };

    const ImagePreview = () => {
        return (
            image ? (
                <div className="extension-container">
                    <h4>{image.name}</h4>
                    <img src={imageExtension} alt="Imagen seleccionada" />

                    <div className="extension-buttons" >
                        <button className="show-button" onClick={handleModal}><img src='/icons/show.svg' /></button>
                        <button className="delete-button" onClick={removeImage}><img src="/icons/delete.svg" /></button>
                    </div>
                </div>
            ) : (
                <div className="empty-files">
                    <img src="/icons/empty.svg" />
                    <h3>No hay archivos</h3>
                </div>
            )
        )
    }


    return (
        <div className="dropzone-container">
            <ImageDropzone />
            <div className="extensions-preview">
                <ImagePreview />
            </div>

            <Modal
                isOpen={showModal}
                onRequestClose={closeModal}
                className='modal'
                style={customStyles}
            >

                <div className="modal-image-conteiner">
                    <div className="modal-image-content">
                        
                            <div className="detail-image-part">
                                <img src="/icons/close.svg" onClick={closeModal} />
                            </div>
                            <img src={imagePreview} />
                        
                    </div>
                </div>
            </Modal>
        </div>


    );
}

export default SingleImageDrop

Archivo: G:\Mochila\DH CTD 1er año\Proyecto Integrador\equipo-9\cine-front\src\components\AsignarCategoria.jsx

import React, { useEffect, useState } from "react";
import ListadoPeliculasRadioButton from "./ListadoPeliculasRadioButton";
import ListadoCategoriasSeleccionar from "./ListadoCategoriasSeleccionar";

const AsignarCategoria = () => {

  useEffect(()=>{window.scrollTo(0, 0)},[])
  

  const [peliculaSeleccionada, setPeliculaSeleccionada] = useState("");
  const [categoriasSeleccionadas, setCategoriasSeleccionadas] = useState([]);
  const [guardado, setGuardado] = useState(false);

  const handleSelectPelicula = (pelicula) => {
    setPeliculaSeleccionada(pelicula);
  };

  const handleCategoriasSeleccionadas = (categorias) => {
    setCategoriasSeleccionadas(categorias);
  };


  const guardarCambios = () => {
    const url = "http://localhost:8080/peliculas";

    const stringificar =() => JSON.stringify({
      ...peliculaSeleccionada,
      categorias: categoriasSeleccionadas.map(({selected, ...rest})=>rest)
    })

    const requestOptions = {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: stringificar()
    };
  
    fetch(url, requestOptions)
      .then(response => {
        if (response.ok) {
          alert("Los cambios se han guardado.");
          setGuardado(true);
        } else {
          throw new Error("Error al guardar los cambios.");
        }
      })
      .catch(error => {
        console.error(error);
        alert("Error al guardar los cambios.");
      });
  };

  return (
    <div>
      <div className="asignoCategorias">
      <div><ListadoPeliculasRadioButton handleSelectPelicula={handleSelectPelicula} /></div>
      <div><ListadoCategoriasSeleccionar 
      peliculaSeleccionada={peliculaSeleccionada} 
      categoriasSeleccionadas={categoriasSeleccionadas}
      handleCategoriasSeleccionadas={handleCategoriasSeleccionadas} /></div>
      </div>
      <hr/>
      <button onClick={guardarCambios}>Guardar cambios</button>
      {guardado && <p>Los cambios se han guardado.</p>}
    </div>
  );
};

export default AsignarCategoria;




Archivo: G:\Mochila\DH CTD 1er año\Proyecto Integrador\equipo-9\cine-front\src\components\CerrarSesion.jsx

import { useEffect } from "react";
import { useNavigate } from "react-router";

function CerrarSesion() {
  const navigate = useNavigate()
  useEffect(() => {
    sessionStorage.removeItem('email');
    sessionStorage.removeItem('role')
    sessionStorage.removeItem('nombre')
    sessionStorage.removeItem('apellido')
  }, []);

  return navigate('/');
}

export default CerrarSesion;

Archivo: G:\Mochila\DH CTD 1er año\Proyecto Integrador\equipo-9\cine-front\src\components\DropdownProfile.jsx

import { useEffect, useRef, useState } from "react";
import { Link } from "react-router-dom"

const DropdownProfile = () => {
    const [open,setOpen] = useState(false);
    let menuRef = useRef();
    

    useEffect(() => {
        let handler = (e) => {
            if(!menuRef.current.contains(e.target)){
                setOpen(false)
            }
        }

        document.addEventListener("mousedown",handler)

        return() => {
            document.removeEventListener("mousedown",handler)
        }
    },[])

    return (
        <div className="account-container" ref={menuRef}>
            
            <div className="account-trigger" onClick={() => {setOpen(!open)}}>
                <img src="/icons/account-icon.svg" />
            </div>
            <div className={`drop-down-profile ${open? 'active' : 'inactive'}`}>
                <ul>
                    {sessionStorage.getItem('role') &&
                        <Link to='/perfil'>
                            <li className="drop-down-item">Perfil {!sessionStorage.getItem('nombre')}</li>
                        </Link>
                    }
                    {!sessionStorage.getItem('role') &&
                        <Link to='/inicio-sesion'>
                            <li className="drop-down-item">Iniciar Sesion</li>
                        </Link>
                    }
                    {!sessionStorage.getItem('role')  &&
                        <Link to='/registrarse'>
                            <li className="drop-down-item">Crear Cuenta</li>
                        </Link>
                    }
                    {sessionStorage.getItem('role') == 'ADMIN' &&
                        <Link to='/admin'>
                            <li className="drop-down-item">Panel de Administrador</li>
                        </Link>
                    }
                    {sessionStorage.getItem('role') &&
                        <Link to='/cerrar-sesion'>
                            <li className="drop-down-item">Cerrar Sesión</li>
                        </Link>
                    }

                </ul>
            </div>

        </div>

    )
}

export default DropdownProfile;

Archivo: G:\Mochila\DH CTD 1er año\Proyecto Integrador\equipo-9\cine-front\src\components\Footer.jsx

import { Link } from 'react-router-dom'
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faLinkedin, faFacebook, faTwitter, faInstagram } from '@fortawesome/free-brands-svg-icons'


const footer = () => {
    return (
        <footer>
            
            <div className="derechosFooter">
                <Link to="../">
                    <img src="../../icons/dhcinema2-logo.png" alt="logoCinemaFooter" />
                </Link>
            </div>
            <div className='information-footer'>
                <ul>
                    <li>2023</li>
                    <li>Derechos reservados</li>
                </ul>
            </div>
            <div className="iconosFooter">
                <a href="https://m.facebook.com" target="_blank" rel="noopener noreferrer">
                    <FontAwesomeIcon icon={faFacebook} />
                </a>
                <a href="https://www.linkedin.com/login/es" target="_blank" rel="noopener noreferrer">
                    <FontAwesomeIcon icon={faLinkedin} />
                </a>
                <a href="https://twitter.com" target="_blank" rel="noopener noreferrer">
                    <FontAwesomeIcon icon={faTwitter} />
                </a>
                <a href="https://www.instagram.com/accounts/login/" target="_blank" rel="noopener noreferrer">
                    <FontAwesomeIcon icon={faInstagram} />
                </a>
            </div>
            
        </footer>

    )
}

export default footer


Archivo: G:\Mochila\DH CTD 1er año\Proyecto Integrador\equipo-9\cine-front\src\components\GestionAdmin.jsx

// import React from 'react'
import { useEffect, useState } from 'react'
import { Link, Outlet } from 'react-router-dom'

const GestionAdmin = () => {
  window.scrollTo(0, 0);
 
  const [panelElement, setPanelElement] = useState("")
  const [description, setDescription] = useState("Seleccione una accion a realizar.")
  const [title, setTitle] = useState("Panel de administrador")

  useEffect(() => {
    if(panelElement == "listar"){
      setTitle('Listar Peliculas')
      setDescription('Aqui podra encontrar un listado de todas las peliculas en cartelera. Puede actualizarlas como eliminarlas.')
    } else if (panelElement == "nueva-pelicula"){
      setTitle('Agregar Nueva Pelicula')
      setDescription('Aqui podra agregar una nueva pelicula. Por favor proporcione el titulo, descripcion, genero/s, fechas disponibles, tiempo de reproduccion, imagenes de portada, banner y de galeria')
    } else if(panelElement == "listado-categorias"){
      setTitle('Listar Categorias')
      setDescription('Aqui podra listar todas las categorias que se encuentran disponibles.')
    }else if(panelElement == "crear-categoria"){
      setTitle('Crear Categoria')
      setDescription('Aqui podra crear una nueva categoria para asignarle a peliculas.')
    } else if(panelElement == "asignar-categoria"){
      setTitle('Asignar Categoria')
      setDescription('Aqui podra listar todas las peliculas y asignarle una nueva categoria.')
    } 
  },[panelElement])

  return (
    < >
      <div className='admin-banner'>
        <div className='admin-details'>
        <h1>{title}</h1>
        <h2>{description}</h2>
        </div>
      </div>
      <div className='admin-links'>
        <Link onClick={() => setPanelElement("listar")} to="/admin/ListadoPeliculas">LISTAR PELICULAS</Link>
        <Link onClick={() => setPanelElement("nueva-pelicula")} to="/admin/nueva-pelicula">CARGAR PELICULA</Link>
        <Link onClick={() => setPanelElement("listado-categorias")} to="/admin/ListadoCategorias">LISTAR CATEGORIAS</Link>
        <Link onClick={() => setPanelElement("crear-categoria")} to="/admin/nueva-categoria">CREAR CATEGORIA</Link>
        <Link onClick={() => setPanelElement("asignar-categoria")} to="/admin/asignar-categoria">ASIGNAR CATEGORIA</Link>
      </div>
      <hr />
      <Outlet />
    </>
  )
}

export default GestionAdmin

Archivo: G:\Mochila\DH CTD 1er año\Proyecto Integrador\equipo-9\cine-front\src\components\Header.jsx

import { Link } from 'react-router-dom'
import DropdownProfile from './DropdownProfile'
import { fetchMovieTilte } from './UseFetch'
import { useNavigate } from "react-router-dom"
import Modal from "react-modal"
import { useState } from 'react'

Modal.setAppElement('#root')

const header = () => {
  const [searchTerm, setSearchTerm] = useState("");
  const [showConfirmation, setShowConfirmation] = useState(false);
  const [errorMessage, setErrorMessage] = useState("Buscando. Por favor, aguarde...")
  const navigate = useNavigate();

  const customStyles = {
    overlay: { zIndex: 1000 }
  }

  const closeModal = () => {
    setShowConfirmation(false)
  }

  const handleInputChange = (e) => {
    setSearchTerm(e.target.value)
  }

  const handleSearch = async () => {
    try {
      setShowConfirmation(true)
      const response = await fetchMovieTilte(searchTerm)
      if (response != false) {
        navigate(`/peliculas/${response.id}`)
      } else {
        setErrorMessage("No se pudo encontrar la pelicula o no existe.")
        setTimeout(() => {
          setShowConfirmation(false)
        }, 2000)
        return
      }
    } catch (error) {
      setErrorMessage("Error al cargar la pelicula.")
      setTimeout(() => {
        setShowConfirmation(false)
      }, 2000)
    }
  }

  const modalClassName = showConfirmation ? 'modal-overlay' : 'modal-overlay hidden';

  return (
    <header>
      <div className="headerContainer">
        <Link to="/">
          <img src="/icons/dhcinema2-logo.png" alt="logoCinema" />
        </Link>
        <div className='header-section'>
          <Link to="/">
            <p>HOME</p>
          </Link>
          <Link to="/peliculas/pagina/1">
            <p>CARTELERA</p>
          </Link>
          <Link to="/categorias/">
            <p>CATEGORIAS</p>
          </Link>
        </div>
      </div>
      <div className='right-header'>
        <div className="search-movie">
          <form onSubmit={handleSearch} className='search-bar'>
            <input
              
              type="text"
              placeholder="Buscar películas..."
              value={searchTerm}
              onChange={handleInputChange} />
            <button type='submit'><img src='/icons/search.svg' /></button>
          </form>
        </div>
        <DropdownProfile />
      </div>

      <Modal
        isOpen={showConfirmation}
        onRequestClose={closeModal}
        style={customStyles}
      >

        <div className={modalClassName}>
          <div className="modal-content">
            <h3>{errorMessage}</h3>
          </div>
        </div>
      </Modal>

    </header>
  )
}

export default header


Archivo: G:\Mochila\DH CTD 1er año\Proyecto Integrador\equipo-9\cine-front\src\components\home\Billboard.jsx

import { useEffect, useState } from "react";
import { searchMoviesForCategories } from "../UseFetch";
import Item from "../Item"
import { Link } from "react-router-dom";
import ContentLoader from "react-content-loader";
import ItemCartelera from "../ItemCartelera";

function Billboard() {

    const [movies,setMovies] = useState()
    const [isLoading, setIsLoading] = useState(true)
    
    useEffect(()=>{

        
        const fetchMovieForCategorie = async () => {
            setIsLoading(true);
            try{
                const movieForCategorie = await searchMoviesForCategories("Ninguno")
                
                setMovies(movieForCategorie);
                console.log(movies)
                setIsLoading(false);
            } catch (error) {
                console.error(error)
                setIsLoading(false);
                
            }
        };
        
        fetchMovieForCategorie()
    },[]) 

    const loadingBox = () => {
      const loaders = []
  
        for (let i=0;i<8;i++){
          loaders.push(
          <div key={i} className="content-loader">
            <ContentLoader
              speed={2}
              width="100%"
              height="100%"
              backgroundColor="#f3f3f3"
              foregroundColor="#ecebeb"
            >
              <rect x="0" y="0" rx="3" ry="3" width="100%" height="100%" />
            </ContentLoader>
          </div>
            
          )
        }
  
        return loaders;
    }
  
    const renderBillboard = () => {
        return (
            <div className="movie-container">
              {isLoading ? (
                  loadingBox()
                )
               : (
                Array.isArray(movies) && movies.length > 0 ? (
                  movies.slice(0,10).map(movie => (
                      <Item
                        key={movie.id}
                        id={movie.id}
                        name={movie.titulo}
                        image={movie.portada}                 
                      />
                  ))
                ) : (
                  loadingBox()
                )
              )}
            </div>
          );
    }




    return (
    <div className="billboard-section">
    <h2>CARTELERA</h2>
    {renderBillboard()}
    <Link to={`/peliculas/pagina/1`}>
        <button>VER MAS</button>
    </Link>
    </div>
    );
}

export default Billboard;


Archivo: G:\Mochila\DH CTD 1er año\Proyecto Integrador\equipo-9\cine-front\src\components\home\Recommended.jsx

import { searchRandomMovies } from "../UseFetch";
import Item from "../Item";
import { useEffect, useState } from "react";
import ContentLoader from "react-content-loader";

function Recommended() {
    const [movies, setMovies] = useState([])
    const [isLoading, setIsLoading] = useState(true);


    useEffect(()=>{

        
        const fetchMovieRandom = async () => {
            setIsLoading(true);
            try{
                const movieForCategorie = await searchRandomMovies()
                setMovies(movieForCategorie);
                setIsLoading(false);
            } catch (error) {
                console.error(error)
                setIsLoading(false);
                
            }
        };
        
        fetchMovieRandom()
    },[])

    const loadingBox = () => {
      const loaders = []
  
        for (let i=0;i<8;i++){
          loaders.push(
          <div key={i} className="content-loader">
            <ContentLoader
              
              speed={2}
              width="100%"
              height="100%"
              backgroundColor="#f3f3f3"
              foregroundColor="#ecebeb"
            >
              <rect x="0" y="0" rx="3" ry="3" width="100%" height="100%" />
            </ContentLoader>
          </div>
            
          )
        }
  
        return loaders;
  }

    return (
        <div className="recommended-section">
                <h2>RECOMENDADOS</h2>
                <div className="movie-container">
              {isLoading ? (
                loadingBox()
              ) : (
                Array.isArray(movies) && movies.length > 0 ? (
                  movies.map(movie => (
                      <Item
                        key={movie.id}
                        id={movie.id}
                        name={movie.titulo}
                        image={movie.portada}
                      />
                  ))
                ) : (
                  loadingBox()
                )
              )}
            </div>
        </div>
    )
}

export default Recommended;


Archivo: G:\Mochila\DH CTD 1er año\Proyecto Integrador\equipo-9\cine-front\src\components\Item.jsx

import { Link } from "react-router-dom"

function Item(props){

    return (
        <div className="movie-card">
            <figure>
                <div className="opt-card">
                    <p>{props.name}</p>
                    <Link key={props.id} to={`/peliculas/${props.id}`}>
                        <button id="details-button">Detalles</button>
                    </Link>
                </div>
                <img className="opt-image" src={props.image}/>
            </figure>
        </div>
    )
}

export default Item

Archivo: G:\Mochila\DH CTD 1er año\Proyecto Integrador\equipo-9\cine-front\src\components\ItemCartelera.jsx

import { Link } from "react-router-dom"

function ItemCartelera(props){

    return (
        <div className="movie-card-cartelera">
            <figure>
                <div className="opt-card">
                    <p>{props.name}</p>
                    <Link key={props.id} to={`../peliculas/${props.id}`}>
                        <button id="details-button">Detalles</button>
                    </Link>
                </div>
                <img className="opt-image" src={props.image}/>
            </figure>
            <ul className="ocultoEnMovil">
                <li>{props.name}</li>
                <li>Clasificación: {props.clasificacion}</li>
                <li>Director: {props.director}</li>
                <li>Duración: {props.duracion} min</li>
            </ul>
        </div>
    )
}

export default ItemCartelera

Archivo: G:\Mochila\DH CTD 1er año\Proyecto Integrador\equipo-9\cine-front\src\components\ListadoCategorias.jsx

import React, { useEffect, useState } from 'react'

const ListadoCategorias = () => {

  const [errorMessage, setErrorMessage] = useState('')
  const [Categorias, setCategorias] = useState([])
  const url = 'http://localhost:8080/categorias';

  useEffect(() => {
    const settings = {
      method: 'GET'
    }
    fetch(url, settings)
      .then(response => response.json())
      .then(data => setCategorias(data))
  }, [])

  const handleBorrarCategoria = (id) => {
    const settings = {
      method: 'DELETE'
    };
    fetch(url + id, settings)
      .then(response => {
        if (response.ok) {

          const fila = document.querySelector(`tr[id="${id}"]`);
          fila.remove();

          return response.text();
        } else {
          throw new Error(response.text());
        }
      })
      .then(data => console.log((data)))
      .catch(error => console.log((error.message)))

  };


  return (
    <main >
      {/* renderizo las cards */}
      <div className='tabla' >
        <table>
          <thead>
            <tr>
              <th scope="col">Id</th>
              <th scope="col">Título</th>
              <th scope="col">Descripción</th>
              <th scope="col">Imagen</th>
            </tr>
          </thead>
          <tbody>
            {Categorias.map((categoria) => (
              <React.Fragment key={categoria.id}>
                <tr id={categoria.id}>
                  <th scope='row'>{categoria.id}</th>
                  <td scope='row'>{categoria.titulo}</td>
                  <td scope='row'>{categoria.descripcion}</td>
                  <td scope='row'>{categoria.urlImagen}</td>
                  {/* 
                Esta línea permite a futuro modificar una película
                <td scope='row'><button ><Link key={dentista.id} to={"/Odontologos/" + dentista.id}>✍</Link> </button></td> 
                */}
                  {/*
                  Esta línea permite borrar categorías
                <td scope='row'><button onClick={() => handleBorrarCategoria(categoria.id)} >🚮</button></td> */}
                </tr>
                <tr>
                  <td colSpan='4'><hr /></td>
                </tr>
              </React.Fragment>
            ))}



          </tbody>
        </table>
      </div>
    </main>
  )
}

export default ListadoCategorias

Archivo: G:\Mochila\DH CTD 1er año\Proyecto Integrador\equipo-9\cine-front\src\components\ListadoCategoriasSeleccionar.jsx

import React, { useState, useEffect } from "react";

const ListadoCategoriasSeleccionar = ({ peliculaSeleccionada, categoriasSeleccionadas, handleCategoriasSeleccionadas }) => {
  const [Categorias, setCategorias] = useState([]);
  const url = 'http://localhost:8080/categorias';

  useEffect(() => {
    const settings = {
      method: 'GET'
    };
    fetch(url, settings)
      .then(response => response.json())
      .then(data => {
        const updatedCategorias = data.map(categoria => ({
          ...categoria,
          selected: false
        }));
        setCategorias(updatedCategorias);
      });
  }, []);

  useEffect(() => {
    if (peliculaSeleccionada) {
      setCategorias(prevCategorias => {
        return prevCategorias.map(categoria => {
          const isSelected = peliculaSeleccionada.categorias.some(cat => cat.id === categoria.id);
          return {
            ...categoria,
            selected: isSelected
          };
        });
      });
    }
  }, [peliculaSeleccionada]);

  const handleCheckboxChange = (categoriaId) => {
    const updatedCategorias = Categorias.map(categoria => {
      if (categoria.id === categoriaId) {
        return {
          ...categoria,
          selected: !categoria.selected
        };
      }
      return categoria;
    });

    const categoriasSeleccionadas = updatedCategorias.filter(
      (categoria) => categoria.selected
    );

    setCategorias(updatedCategorias);
    handleCategoriasSeleccionadas(categoriasSeleccionadas);
  };

  return (
    <main>
      <h2>Seleccione categorías</h2>
      {/* renderizo las cards */}
      <div className='tabla'>
        <table>
          <thead>
            <tr>
              <th scope="col">Id</th>
              <th scope="col">Título</th>
              <th scope="col">Seleccionar</th>
            </tr>
          </thead>
          <tbody>
            {Categorias.map(categoria => (
              <tr id={categoria.id} key={categoria.id}>
                <td scope='row'>{categoria.id}</td>
                <td scope='row'>{categoria.titulo}</td>
                <td scope='row'>
                  <input
                    type='checkbox'
                    name='categoria'
                    value={categoria.id}
                    checked={categoria.selected}
                    onChange={() => handleCheckboxChange(categoria.id)}
                  />
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </main>
  )
};

export default ListadoCategoriasSeleccionar;


Archivo: G:\Mochila\DH CTD 1er año\Proyecto Integrador\equipo-9\cine-front\src\components\ListadoPeliculas.jsx

import React, { useEffect, useState } from 'react'
import { deleteMovie } from './UseFetch'
import { searchMoviesForCategories } from './UseFetch'
import Modal from 'react-modal'
import { useParams, useNavigate } from "react-router-dom"
//Genera una nabvar para elegir entre ver la lista de películas y el form de agregar película
//Este código muestra una tabla con todas las películas, y a la derecha un botón para eliminar. 
//También se puede agregar un botón para modificar y un form para hacer la modificación.

Modal.setAppElement('#root')

const ListadoPeliculas = () => {
  const [isLoading, setIsLoading] = useState(true)
  const [showModal,setShowModal] = useState(false)
  const [peliculas, setPeliculas] = useState([])
  const [movieId,setMovieId] = useState('')
  const [deleted, setDeleted] = useState(false)
  const [content, setContent] = useState('¿Estás seguro de que deseas eliminar los datos?')

  const params = useParams()
  const navigate = useNavigate();

  const customStyles = {
    overlay: { zIndex: 1000 }
}

  useEffect(() => {
    const fetchMovie = async () => {
      
      try {
        const movies = await searchMoviesForCategories("Ninguno");
        setPeliculas(movies);
        setIsLoading(false)
      } catch (error) {
        console.log(error)
      }
    }

    fetchMovie()
  }, [])

  const handleDeleteButtonClick = (id) => {
    setMovieId(id)
    setShowModal(true)
  }

  const handleConfirm = async (res) => {
    if (res == 'yes') {
      try {
        const response = await deleteMovie(movieId)
        if (response == true) {
          setDeleted(true)
          const fila = document.querySelector(`tr[id="${id}"]`);
          fila.remove();
          setContent('La pelicula fue eliminada con exito')
          setTimeout(() => {
            setShowConfirmation(false)
          }, 2000);
        } else {
          setContent('Hubo un problema a la hora de eliminar la pelicula')
          setShowConfirmation(false)
        }
      } catch (error) {
        setContent('Hubo un error en la peticion a la red')
        setShowConfirmation(false)
      }
    } else {
      setShowModal(false)
    }

  }

  const closeModal = () => {
    setShowModal(false)
  }



  return (
    <div>
      {/* renderizo las cards */}
      <div className='tabla' >
        <table>
          <thead>
            <tr>
              <th scope="col">Id</th>
              <th scope="col">Título</th>
            </tr>
          </thead>
          <tbody>
            {!isLoading && peliculas.map((pelicula) => (
              <tr id={pelicula.id} key={pelicula.id}>
                <th scope='row'>{pelicula.id}</th>
                <td scope='row'>{pelicula.titulo}</td>

                {/* 
                Esta línea permite a futuro modificar una película
                <td scope='row'><button ><Link key={dentista.id} to={"/Odontologos/" + dentista.id}>✍</Link> </button></td> 
                */}
                <td scope='row'><button onClick={() => handleDeleteButtonClick(pelicula.id)}>🚮</button></td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      <Modal
        isOpen={showModal}
        style={customStyles}
        onRequestClose={closeModal}
        contentLabel="Confirmacion"
        className="modal-confirmation"
      >

        
          <div className="confirmation-content">
            {!deleted ? (<h2>Confirmacion</h2>) : ('')}

            <p>{content}</p>
            {!deleted ? (
              <div className="modal-buttons">
                <button onClick={() => handleConfirm('yes')}>Si</button>
                <button onClick={() => handleConfirm('no')}>No</button>
              </div>) :
              ('')}

          </div>
        
      </Modal>
    </div>
  )
}

export default ListadoPeliculas

Archivo: G:\Mochila\DH CTD 1er año\Proyecto Integrador\equipo-9\cine-front\src\components\ListadoPeliculasRadioButton.jsx

import React, { useEffect, useState } from "react";


const ListadoPeliculasRadioButton = ({handleSelectPelicula}) => {
    const [Peliculas, setPeliculas] = useState([]);
    const url = "http://localhost:8080/peliculas";


useEffect(() => {
  const fetchData = async () => {
    const settings = { method: "GET" };
    const response = await fetch(url, settings);
    const data = await response.json();
    setPeliculas(data);
  };
  fetchData();
}, []);


    return (
        <main>
            {/* renderizo las cards */}
            <div className="tabla">
                <h2>Seleccione película</h2>
                <table>
                    <thead>
                        <tr>
                            <th scope="col">Id</th>
                            <th scope="col">Título</th>
                        </tr>
                    </thead>
                    <tbody>
                        {Peliculas.map((pelicula) => (
                            <tr id={pelicula.id} key={pelicula.id}>
                                <td scope="row">
                                    <input
                                        type="radio"
                                        name="pelicula"
                                        value={pelicula.id}
                                        onChange={() => handleSelectPelicula(pelicula)}
                                    />
                                </td>
                                <th scope="row">{pelicula.id}</th>
                                <td scope="row">{pelicula.titulo}</td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
            
        </main>
    );
};

export default ListadoPeliculasRadioButton;


Archivo: G:\Mochila\DH CTD 1er año\Proyecto Integrador\equipo-9\cine-front\src\components\Nueva-categoria.jsx

import React, { useState } from 'react'

const NuevaCategoria = () => {
  
  
  const [title, setTitle] = useState("");
  const [descripcion, setDescripcion] = useState("");
  const [imageUrl, setImageUrl] = useState("");
  const [errors, setErrors] = useState({});

  const handleSubmit = (e) => {
    e.preventDefault();
      // Validar los campos antes de enviar la solicitud
      const validationErrors = {};
      if (title.trim() === "") {
        validationErrors.title = "El título es requerido"
      }
      if (descripcion.trim() === "") {
        validationErrors.descripcion = "La descripción es requerida"
      }
      if (imageUrl.trim() === "") {
        validationErrors.imageUrl = "La URL de la imagen es requerida"
      }
  
      // Verificar si hay errores de validación
      if (Object.keys(validationErrors).length > 0) {
        setErrors(validationErrors);
        return;
      }

    // Crear el objeto de datos a enviar al servidor
    const categoryData = {
      titulo: title,
      descripcion: descripcion,
      urlImagen: imageUrl,
    };
  
    // Realizar la petición POST al servidor
    fetch("http://localhost:8080/categorias", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(categoryData),
    })
      .then((response) => response.json())
      .then((data) => {
        // Manejar la respuesta del servidor
        console.log(data); // dejo lugar para acciones posteriores al agregado de los datos
        // Reseteo los campos del formulario
        setTitle("");
        setDescripcion("")
        setImageUrl("")
        setErrors({})
      })
      .catch((error) => {
        console.error(error); // Manejar el error en caso de que ocurra
      });
  };

  return (
      <div>
        <h2>Crear Categoría</h2>
        <form onSubmit={handleSubmit} className='form-crearCategoria'>
          <div>
            <label>Título : </label>
            <input
              type="text"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
            />
            {errors.title && <span>{errors.title}</span>}
          </div>
          <div>
            <label>Descripción : </label>
            <input
              type="text"
              value={descripcion}
              onChange={(e) => setDescripcion(e.target.value)}
            />
            {errors.description && <span>{errors.description}</span>}
          </div>
          <div>
            <label>URL de la Imagen : </label>
            <input
              type="text"
              value={imageUrl}
              onChange={(e) => setImageUrl(e.target.value)}
            />
            {errors.imageUrl && <span>{errors.imageUrl}</span>}
          </div>
          <button type="submit">Crear Nueva categoria</button>
        </form>
      </div>
    );
}

export default NuevaCategoria











Archivo: G:\Mochila\DH CTD 1er año\Proyecto Integrador\equipo-9\cine-front\src\components\UseFetch.jsx

// Clase preparada para recibir una url y hacer peticiones a traves de un parametro

const API_ENDPOINT = `http://localhost:8080`;


export const searchMoviesForCategories = async (url) => {

    if (url === 'Ninguno') {
        url = '/peliculas'
    } else {
        url = `/peliculas/categoria/${url}`
    }

    console.log(`${API_ENDPOINT}${url}`)

    const response = await fetch(`${API_ENDPOINT}${url}`)
        .then((response) => {
            return response.json()
        })
        .catch(error => {
            console.error(error)
        });
    console.log(response)
    return response;
};

export const searchRandomMovies = () => {
    const url = `/peliculas/random`


    return fetch(`${API_ENDPOINT}${url}`)
        .then((response) => response.json())
        .catch(error => {
            console.error(error)
        });

}

export const searchMovieDetails = (id) => {
    const url = `/peliculas/${id}`

    return fetch(`${API_ENDPOINT}${url}`)
        .then((response) => { return response.json() })
        .catch((error) => {
            console.error(error)
            return false
        });
}

export const deleteMovie = async (id) => {
    const url = `/peliculas/${id}`

    const response = await fetch(`${API_ENDPOINT}${url}`, {
        method: 'DELETE'
    })
        .then((response) => {
            console.log(response.status)
            if (response.status == 200)
                return true
            else return false
        }

        )
        .catch((error) => {
            console.error(error)
            return error
        })


    return response;

}

export const newMovie = async (data) => {
    const url = '/peliculas'

    const response = await fetch(`${API_ENDPOINT}${url}`, {
        method: "POST",
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
    })
        .then((response) => {
            console.log(response.status)
            if (response.status == 200)
                return true;
            else {
                console.log(response.text)
                return false;
            }
        })
        .catch((error) => {
            console.error(error)
            return error;
        })

    return response;
}

export const showPages = async (number) => {
    const url = `/peliculas/pagina/${number}`

    const response = await fetch(`${API_ENDPOINT}${url}`)
        .then((response) => {
            return response.json()
        })
        .catch((error) => {
            console.log(error)
            return false;
        });

    return response;
}

export const fetchMovieTilte = async (title) => {
    const url = `/peliculas/titulo/${encodeURIComponent(title)}`

    const response = await fetch(`${API_ENDPOINT}${url}`)
        .then((response) => {
            return response.json()
        })
        .catch((error) => {
            console.log(error)
            return false;
        })

    return response;
}

export const fetchRegisterUser = async (user) => {
    const url = "/usuarios/register"
    console.log(user)
    const response = await fetch(`${API_ENDPOINT}${url}`,{
        method: "POST",
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(user),
    }).then((response) => {
        if (response){
            console.log(response)
            return response.text();
        } else {
            throw new Error('Error en la solicitud HTTP');
        }
        
    }).then(data => {
        console.log(data)
        return data;
    })
    .catch((error) => {
        console.log(error)
        return false;
    })

    return response;
}

export const fetchLogInUser = async (user) => {
    const url = "/usuarios/login"

    const response = await fetch(`${API_ENDPOINT}${url}`,{
        method: "POST",
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(user),
    }).then((response) => {
        if (response.ok){
            return response.text();
        } else {
            throw new Error('Error en la solicitud HTTP');
        }
    }).then(data => {
        console.log(data)
        return data;
    })
    .catch((error) => {
        console.log(error)
        return false;
    })

    return response;
}

export const confirmAccount = async (token) => {
    const url = `/usuarios/confirmar-cuenta?token=${token}`

    const response = await fetch(`${API_ENDPOINT}${url}`)
    .then((response) => {
        if (response){
            return response.text();
        } else {
            throw new Error('Error en la solicitud HTTP');
        }
    }).then(data => {
        console.log(data)
        return data;
    })
    .catch((error) => {
        console.log(error)
        return false;
    })

    return response;
}

export const fetchGetUsuario = async (email) => {
    const url = `/usuarios/${email}`

    console.log(`${API_ENDPOINT}${url}`)

    const response = await fetch(`${API_ENDPOINT}${url}`)
        .then((response) => {
            return response.json()
        })
        .catch(error => {
            console.error(error)
        });
    console.log(response)
    return response;
}

export const fetchCategorias = async () => {
    const url='/categorias'

    const response = await fetch(`${API_ENDPOINT}${url}`)
        .then((response) => {
            return response.json()
        })
        .catch(error => {
            console.error(error)
        });
    console.log(response)
    return response;
}

Archivo: G:\Mochila\DH CTD 1er año\Proyecto Integrador\equipo-9\cine-front\src\components\utils\Categorie.jsx

function Categorie(props) {
    
    return(
        <div className="categorie-card">
            <figure onClick={() => props.updateFather(props.name)}>
                <h4>{props.name.toUpperCase()}</h4>
                <img  src={props.image}/>
            </figure>
        </div>
    )
}

export default Categorie

Archivo: G:\Mochila\DH CTD 1er año\Proyecto Integrador\equipo-9\cine-front\src\index.css

:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);

  background-color: #E0E1DD;
  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  -webkit-text-size-adjust: 100%;
}

input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

#root {
  margin: 0;
  box-sizing: border-box;
  display: block;
  text-align: center;
  max-width: none;
}

.main-content {
  min-height: 100vh;
  padding-top: 70px;
  background-color: #0D1B2A;
}

html,
body {

  display: block;
  margin: 0;
  padding: 0;
  display: flex;
  flex-direction: column;
  height: 100%;
}


a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}

a:hover {
  color: #535bf2;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

h3 {
  color: #1b263b
}

button {
  border-radius: 8px;

  border: 1px solid transparent;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}


nav {
  display: flex;
  justify-content: space-around;
}

.main-content button {
  padding: 10px;
}

button:hover {
  border-color: #646cff;
}

button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}



.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}

.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}

.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

.modal-conteiner {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 40%;
  height: 40%;
  background-color: #1B263B;
  border-radius: 30px;
}

.modal-image-conteiner {
  position: absolute;
  top: 40%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 50%;
  height: 50%;
  background-color: #1B263B;
}

.modal-image-content {
  display: flex;
  flex-direction: column;

  align-items: center;
  width: 100%;
  height: 100%;
}


.detail-image-part {
  align-self: flex-start;
  width: 100%;
  height: 5%;
  background-color: #1B263B;
  display: flex;
}

.modal-image-preview {
  width: 100%;
  height: 95%;
}

.modal-object {
  width: 100%;
  height: 100%;
  object-fit: contain;

}


.detail-image-part img {
  height: 50%;
  align-self: center;
  width: auto;
  margin-left: 5px;
}

.modal-content {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  width: 100%;
  height: auto;
}

/* Header */

header {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  background-color: #1B263B;
  position: fixed;
  width: 100%;
  z-index: 100;
  height: 70px;
  width: 100%;
}

.account-container {
  position: relative;
  padding-right: 30px;
}

.account-trigger {
  display: flex;
}

.account-trigger img {
  width: 40px;
  border-radius: 50%;
  overflow: hidden;
  cursor: pointer;
  align-self: center;
}


.drop-down-profile {
  position: absolute;
  top: 58px;
  right: 30px;
  background-color: #fff;
  border-radius: var(--border-radius);
  padding: 10px 20px;
  width: 200px;
}

.drop-down-profile::before {
  content: '';
  position: absolute;
  top: -5px;
  right: 20px;
  height: 20px;
  width: 20px;
  background: var(--secondary-bg);
  transform: rotate(45deg);
}

.drop-down-profile.active {
  opacity: 1;
  visibility: visible;
  transform: translateY(0);
  transition: var(--speed) ease;
}

.drop-down-profile.inactive {
  opacity: 0;
  visibility: hidden;
  transform: translateY(-20px);
  transition: var(--speed) ease;
}

.drop-down-profile ul {
  list-style: none;
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 0;
}

.drop-down-profile ul li {
  padding: 10px 0;
  border-top: 1px solid rgba(0, 0, 0, 0.05);
}

.drop-down-profile ul li:hover a {
  color: rgb(212, 33, 9);
  cursor: pointer;
}

.drop-down-profile ul li:hover img {
  opacity: 1;
  cursor: pointer;
}



.drop-down-item a {
  text-decoration: none;
  transition: var(--speed);
}

.header-section {
  display: flex;
  justify-content: space-evenly;
  
  align-items: center;

}

.header-section p {
  text-decoration: none;
  color: white;
  font-weight: 200;
  margin-left: 10px;
}

.header-section p:hover {
  color: #778DA9;
}

.headerContainer {
  display: flex;
  justify-content: space-around;
  align-items: center;
  width: 30%;
}

.headerContainer img {
  width: 180px;
}

.right-header {
  display: flex;
  align-items: center;
  justify-content: space-evenly;
  width: 25%;
}

.error-message-header {
  width: 200px;
}

.search-bar {
  background-color: white;
  align-self: center;
  border-radius: 60px;
  padding: 5px 10px;
  display: flex;
  align-items: center;
  width: 300px;
}

.search-movie {
  display: flex;
  align-self: center;
}

.search-bar input {
  background: transparent;
  flex: 1;
  border: 0;
  outline: none;

  font-size: 15px;
  color: #1b263b;
}

.search-bar button img {
  width: 10px;
}

.search-bar button {
  border: 0;
  border-radius: 50%;
  width: 35px;
  height: 35px;
  background-color: rgba(148, 114, 114, 0.082);
  cursor: pointer;
}

/* Perfil dropdown*/



.datosDropDown h3{
  color: #415A77;
  font-weight: 200;
}

.h1dropdown h1{
  font-weight: 400;
  font-size: 24px;
  margin-bottom: 10px;
}




/* footer */

footer {
  background-color: #1B263B;
  display: flex;
  width: 100%;
  justify-content: space-between;
  align-items: center;
  flex-shrink: 0;
}




.information-footer ul {
  padding: 0;
  margin: 0;
}

.information-footer ul li {
  list-style-type: none;
  font-size: small;
  padding-top: 5px;
  align-self: center;
  list-style: none;
  color: #E0E1DD;
}


.derechosFooter img {
  width: auto;
  height: 100px;
  align-self: center;
}

.iconosFooter svg {
  height: 30px;
  padding-right: 5px;
  
}


.iconosFooter {
  display: flex;
  justify-content: center;
  height: 80px;
  align-items: center;
}


/* Home */


/* Clases que manejan las secciones de peliculas en el home */

.carousel-section {
  width: 100%;
  height: 60vh;
  padding-bottom: 20px;
}

.carousel {
  width: 100%;
  height: 100%;
  position: relative;
  overflow: hidden;
}



.card {

  position: absolute;
  display: flex;
  justify-content: center;
  align-items: center;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  margin: auto;
  width: 70%;
  height: 90%;
  cursor: pointer;
  z-index: 0;
  opacity: 0;
  transition: 500ms;

}



.card figure {
  position: relative;
  overflow: hidden;
  width: 100%;
  height: 100%;
  border-radius: 20px;
}

.card figure div {
  padding-left: 5%;
  display: flex;
  flex-direction: column;
  justify-content: center;
  position: absolute;
  align-items: flex-start;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.3);
}

.card figure div h1 {
  color: white;
  margin: 0;
}

.card figure div h3 {
  color: white;
  font-weight: 300;
}

.card figure div h4 {
  color: white;
  font-weight: 100;
}

.card figure div button {
  margin: 10px 0px;
  background-color: #1b263b
}

.card figure div button:hover {
  color: #1b263b;
  background-color: white;
  border: 3px solid #1b263b;
  transition: 300ms;
}


.card figure img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.card::before {
  content: '';
  position: absolute;
  bottom: -10px;
  width: 95%;
  height: 30px;
  background: rgba(218, 193, 193, 0.212);
  border-radius: 60%;
  z-index: -1;
  filter: blur(7px);
}

.card--active {
  opacity: 1;
  transform: scale(1);
  z-index: 99;
}

.card--left {
  transform: translateX(-100%) scale(0.8);
  transition: 500ms;
  opacity: 0.3;
}

.card--right {
  transform: translateX(100%) scale(0.8);
  transition: 500ms;
  opacity: 0.3;
}

.billboard-section {
  margin-top: 20px;
  align-items: center;
  box-sizing: border-box;
  word-wrap: break-word;
  display: flex;
  flex-direction: column;
}

.billboard-section h2 {
  color: white;
  align-self: flex-start;
  font-weight: 200;
  padding-left: 16%;
}

.billboard-section button {
  margin: 15px 0px;
  padding: 10px 20px;
  background-color: white;
  border: 2px solid #415A77;
  color: #415A77;
}

.billboard-section button:hover {
  background-color: #415A77;
  color: white;
  transition: 300ms;
}

.recommended-section {
  padding-bottom: 30px;
  align-items: center;
  box-sizing: border-box;
  word-wrap: break-word;
  display: flex;
  flex-direction: column;
}

.recommended-section h2 {
  color: white;
  align-self: flex-start;
  font-weight: 200;
  padding-left: 16%;
}

.movie-container {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  grid-gap: 30px;
  grid-auto-flow: column;
  overflow-x: scroll;
  overflow-y: hidden;
  scroll-behavior: smooth;
  padding-bottom: 20px;
  width: 90vw;
}
.movie-container-cartelera {
  display: grid;
  grid-template-columns: auto;
  grid-gap: 30px;
  grid-auto-flow: column;
  overflow-x: scroll;
  overflow-y: hidden;
  scroll-behavior: smooth;

  padding-bottom: 20px;

  width: 90vw;
}

.movie-container::-webkit-scrollbar {
  -webkit-appearance: none;
  width: 8px;
  height: 8px;
}

.movie-container::-webkit-scrollbar-thumb {
  background-color: gray;
  border-radius: 20px;
}

.movie-container::-webkit-scrollbar-track {
  background: transparent;
}

.movie-card {
  display: flex;
  justify-content: center;
  align-items: center;
}

.movie-card-cartelera{
  display: flex;
  justify-content: center;
  align-items: center;
  width: 43vw;
}

.movie-card figure {
  width: 200px;
  height: 100%;
  position: relative;
  overflow: hidden;
  border-radius: 6px;
  box-shadow: 10px 10px 15px rgba(138, 136, 136, 0.664);
  cursor: pointer;
  margin: 0;

  flex-grow: 0;
}
.movie-card-cartelera figure {
  width: 200px;
  height: 100%;
  position: relative;
  overflow: hidden;
  border-radius: 6px;
  box-shadow: 0px 10px 15px rgba(0, 0, 0, 0.4);
  cursor: pointer;
  margin: 0;

  flex-grow: 0;
}


.content-loader {
  width: 200px;
  height: 280px;
  flex-grow: 0;
}

.movie-card figure img {
  width: 100%;
  height: 100%;
  transition: all 1s ease-out;
}

.movie-card-cartelera figure img {
  width: 100%;
  height: 100%;
  transition: all 1s ease-out;
}

.opt-card {
  display: flex;
  flex-direction: column;
  justify-content: space-evenly;
  position: absolute;
  align-items: center;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.7);
  transition: all 500ms ease-out;
  opacity: 0;
  visibility: hidden;
}

.opt-card button {
  width: 100%;
  color: #E0E1DD;
  background-color: #415A77;
}

.movie-card figure:hover>.opt-card {
  opacity: 1;
  visibility: visible;
}

.movie-card-cartelera figure:hover>.opt-card {
  opacity: 1;
  visibility: visible;
}

.ocultoEnMovil{
  list-style-type: none ;
  text-align: left;
}

/* Clases que manejan el carrusel de categorias home */

.categories-section {
  display: flex;
  flex-direction: row;
  justify-content: center;
  overflow: hidden;
  align-items: center;
  word-wrap: break-word;
}

.carrousel-slider {
  width: 80%;
  display: flex;
  justify-content: space-between;
  overflow-x: hidden;
  scroll-behavior: smooth;
}

.categorie-card {
  width: 100%;
  display: flex;
  justify-content: center;
  align-items: center;

}

.categorie-card figure {
  width: 300px;
  height: 200px;
  position: relative;
  overflow: hidden;
  border-radius: 6px;
  box-shadow: 0px 10px 30px rgba(0, 0, 0, 0.4);
  cursor: pointer;
}

.categorie-card figure img {
  width: 100%;
  height: 100%;
  flex-grow: 1;
  transition: all 1s ease-out;
}

.categorie-card figure h4 {
  display: flex;
  flex-direction: column;
  justify-content: center;
  background: rgba(0, 0, 0, 0.5);
  position: absolute;
  margin: 0;
  width: 100%;
  height: 100%;
  transition: all 500ms ease-out;
  opacity: 1;
}

.categorie-card figure:hover>h4 {
  backdrop-filter: blur(2px);
}

.first-button,
.last-button {
  padding: 0px 10px;
  width: 20px;
  height: 100%;
  position: relative;
  text-align: center;
  z-index: 99;
}

/** Seccion de vista de detalles **/

.movie-details {
  background-color: white;
}

.banner-video {
  width: 100%;
  height: 60vh;
  background-position: left calc((50vw - 170px) - 340px) top;
  background-size: cover;
  background-repeat: no-repeat;

  position: relative;
  border-bottom: 1px solid black;
  box-shadow: 0px 0px 60px rgba(0, 0, 0, 0.7);
}

.banner-details {
  display: flex;
  justify-content: center;
  width: 100%;
  height: 60vh;
  background-image: linear-gradient(to right, rgba(31.5, 10.5, 94.5, 1) calc((50vw - 170px) - 340px), rgba(31.5, 10.5, 94.5, 0.84) 50%, rgba(31.5, 10.5, 94.5, 0.84) 100%);
}
.caracteristica-item{
  display:flex;
  justify-content: space-evenly;
  width: 98vw;
}
.movie-details-features {
  display: flex;
  font-weight: 600;
  margin-top: 10vh;
  margin-bottom: 10vh;
  color: #000;
}
.movie-details-features h2 {
  position: relative;
  text-align: left;
  margin-left: 5vw;
}
.h2-movieDetails hr{
  border: none; /* Eliminar el borde predeterminado */
  border-top: 1px solid rgb(17, 5, 83); /* Establecer el color del borde superior */
}
.movie-first-info {
  position: absolute;
  top: 40%;
  left: 15%;
}

.movie-first-info-details {
  text-align: left;
  color: black;
  font-weight: 500;
}

.movie-first-info-details h4 {
  color: #1B263B;
  font-weight: 300;
}

.movie-first-info img {
  width: 30vh;
  box-shadow: 0px 15px 20px rgba(0, 0, 0, 0.2);
  margin-bottom: 3;
}

.play-icon {
  width: 5%;
  align-self: center;
  cursor: pointer;
}

.video-details {
  position: absolute;
  width: 90%;
  height: 90%;
  top: 3%;
  left: 5%;
  z-index: 101;
}

.detail-video-part {
  display: flex;
  flex-direction: row;
  height: 4%;
  align-items: center;
  background-image: linear-gradient(to right, rgba(27, 38, 59, 1) calc((50vw - 170px) - 340px), rgba(27, 38, 59, 0.84) 50%, rgba(27, 38, 59, 0.84) 100%);
}

.detail-video-part img {
  height: 40%;
  margin-right: 3%;
  padding-left: 10px;
}


.movie-details-title {
  position: absolute;
  bottom: 0;
  left: 33%;

}

.movie-details-title h2 {
  color: white;
}

.movie-details-description {
  text-align: left;
  width: 50%;
  color: #000;
}

.movie-details-description p {
  font-weight: 500;
  font-size: 14px;
  height: 100%;
}
.fechas-container {
width: 100%;
height: auto;
}

.fechas-container div{
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
}

.fechas-container div button{
  margin: 10px 5px;
}

.movie-details-second {
  position: relative;
  height: 40vh;
}

.movie-second-info {
  position: absolute;
  top: 2%;
  left: 35%;
  width: 45%;
  display: flex;
}

.movie-second-info h2 {
  color: #61635d;
  font-weight: 100;
}

.dates-button {
  margin: 0px 5px;
  background-color: #1B263B;
}

.movie-details-related {
  width: 50%;
  padding-left: 20px;

  text-align: left;
  border-left: 2px solid #1B263B;
}

.movie-details-related .movie-container {
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  width: 100%;
}

.grid-container {
  position: relative;
  width: 100%;
  display: flex;
  justify-content: center;
  overflow-x: hidden;
  align-items: center;
}



.show-gallery-conteiner{
  display: flex;
  flex-direction: column;
  height: 100%;
  justify-content: space-between;
}

.gallery-image{
  width: 60%;
  height: 60vh;
  align-self: center;
}

.close-gallery img{
  width: 2%;
  padding-top: 20px;
  padding-left: 20px;
  
}

.gallery-image img{
  width: 100%;
  height: 100%;
  object-fit: contain;
}

.carrousel-gallery{
  width: 100%;
  align-self: center;
  display: flex;
  flex-direction: row;
  justify-content: center;
  
}

.carrousel-gallery img{
  width: 7%;
  cursor: pointer;
  margin: 40px 20px;
}

.carrousel-gallery img:hover{
  scale: 1.5;
  
}


.half-left {
  width: 50%;
  height: 100%;
}

.half-left img {
  width: 100%;
  height: 100%;
  align-self: center;
  object-fit: contain;
}

.half-right {
  width: 50%;
  display: grid;
  grid-template-columns: repeat(2, 0fr);
  grid-gap: 1px;
  overflow-y: hidden;
}

.half-right>div {
  width: 20vw;
  height: 20vw;
}

.half-right>div img {
  height: 20vw;
  object-fit: fill;
  
}

.button-container {
  width: 50vh;
  position: absolute;
  bottom: 10px;
  right: 90px;
}

.button-container img{
  width: 30%;
  cursor: pointer;
  
}

.movie-second-div {
  padding: 20px 0;
}
.half-left img {
  width: 40vw;
  height: 60vh;
}
.half-right img {
  width: 20vw;
  height: 20vh;
}


/** Panel de administrador **/

.admin-banner {
  width: 100%;
  height: 40vh;
  background-position: bottom 50% left 50%;
  background-size: cover;
  background-repeat: no-repeat;
  background-image: url('/banner-admin.jpg');
  position: relative;
  border-bottom: 1px solid black;
  box-shadow: 0px 0px 60px rgba(0, 0, 0, 0.7);
}

.admin-details {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: flex-start;
  width: 100%;
  height: 100%;
  background-image: linear-gradient(to right, rgb(12, 12, 12) calc((50vw - 170px) - 340px), rgba(0, 0, 0, 0.9) 50%, rgba(0, 0, 0, 0.3) 100%);
}

.categories-form{
  display: flex;
  flex-direction: column;
  flex-wrap: wrap;
  height: 208px;
}

.categories-form label{
  margin: 5px 30px;
  align-self: center;
}

.admin-links {
  display: flex;
  justify-content: space-around;
  padding: 10px 0;
}

.admin-links a {
  text-decoration: none;
  color: white;
}

.admin-links a:hover {
  text-decoration: underline;
}

.admin-links a:enabled {
  text-decoration: underline;
}

.admin-details h1 {
  font-weight: 300;
  padding-left: 5%;
}

.admin-details h2 {
  font-weight: 100;
  width: 50%;
  text-align: left;
  padding-left: 5%;
}

.admin-form {
  text-align: center;
  border: none;
  padding-top: 40px;
}

.admin-div{
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  width: 100%;
}

.admin-div-first{
  width: 50%;
  display: flex;
  flex-direction: column;
 
}

.admin-div-first label{
  text-align: left;
}

.admin-div-last{
  width: 45%;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  height: 40vh;
}

.admin-div-last div{
  display: flex;
  flex-direction: column;
  text-align: left;
  margin: 0px 10px;
}

.admin-div-last div label{
  margin-bottom: 10px;
}

.admin-div-last input{
  background-color: #1B263B;
  border: none;
  border-radius: 10px;
  height: 4vh;
  width: 90%;
  padding-left: 20px;
  text-align: left;
  margin: 10px 0px 30px 0;
}

.admin-form h3 {
  color: #1b263b;
}

.admin-form form label {
  color: white;
}

.form-title {
  background-color: #1B263B;
  border: none;
  border-radius: 10px;
  height: 4vh;
  width: 90%;
  padding-left: 20px;
  text-align: left;
  margin: 10px 0px 30px 0;
}


.admin-form form {
  display: flex;
  flex-direction: column;
  margin: 0;
  align-items: flex-start;
  padding-left: 100px;
  height: auto;
}

.date-container {
  height: 10vh;
  display: flex;
  flex-direction: column;
  justify-content: center;

}

.date-container label {
  text-align: left;
  margin-bottom: 10px;
}

.form-description {
  margin: 10px 0px;
  background-color: #1B263B;
  border: none;
  border-radius: 10px;
  height: 25vh;
  width: 150%;
  text-align: center;
}

.date-center{
  text-align: left;
  margin: 5px 0px 20px 30px;
}

.rmdp-input {
  background-color: #1B263B;
  border: none;
  width: 200px;
}

.form-categories {
  border: 2px solid #1b263b;
  background-color: #ADADAD;

  text-align: center;
  width: 30%;
  height: 20%;
  margin: 10px 0 30px 0;
}

.form-categories option:hover {
  font-size: medium;
}

.form-image {
  object-fit: contain;
  height: 40%;
  display: flex;
  text-align: center;
  align-items: center;
  border: 1px solid black;
  margin: 10px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
}

.form-image img {
  object-fit: cover;
  width: 100%;
  height: 100%;
}

.dropzone-container {
  display: flex;
  flex-direction: column;
  justify-content: center;

  align-self: left;
  width: 60%;
  height: auto;
  background-color: #1B263B;
  border-radius: 10px;
  margin: 20px 0;
}

.dropzone {
  width: 96%;
  align-self: center;
  border: 1px dashed #E0E1DD;
  text-align: center;
  margin: 20px;
  display: flex;
  justify-content: center;
  background-color: #415A77;
}

.dropzone-info {
  display: flex;
  flex-direction: column;
  justify-content: center;
  padding: 15px 0px;
}

.dropzone-info p {
  font-size: small;
  font-weight: 500;
}

.dropzone-info img {
  width: 15%;
  height: auto;
  align-self: center;
  object-fit: cover;
}

.extensions-preview {
  display: inline-flex;
  justify-content: center;
  flex-wrap: wrap;
}

.empty-files {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-self: center;
  padding: 10px 0;
}

.empty-files img {
  align-self: center;

}

.empty-files h3 {
  color: #415A77;
}

.extension-container {
  width: 20%;
}

.extensions-preview h4 {
  margin: 0;
  font-size: 10px;
  margin-bottom: 3px;
}

.extensions-preview img {
  width: 20%;
}

.extension-buttons button {
  background-color: transparent;
  border: none;
  padding: 0;
  width: 8%;
  margin: 3px;
}

.show-button img {
  width: 100%;
}

.delete-button img {
  width: 100%;
}

.form-image {
  border-radius: 20px;
}

.admin-form form button {
  align-self: center;
  background-color: white;
  color: #1B263B;
  margin-top: 10px;
  margin-bottom: 30px;
}

.tabla {
  display: flex;
  justify-content: space-between;
  flex-wrap: wrap;
  flex-direction: column;
  padding: 30px 20%;
}

.modal-confirmation {
  width: 100%;
  height: 100%;
}

.confirmation-content {
  background-color: #1B263B;
  width: 50%;
  height: 20%;
  border-radius: 20px;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

.confirmation-content .modal-buttons button {
  width: 5vh;
  height: 3vh;
  background-color: #415A77;
  margin: 0px 20px;
}


/* Form Crear Categoria */



.form-crearCategoria div{
  margin: 5px;
}

.form-crearCategoria button{
  color: #0D1B2A;
  background-color: #E0E1DD;
  margin-top: 15px;
}



.form-crearCategoria button:hover{
  color: #E0E1DD;
  background-color: #415A77;
  box-shadow: 0px 1px 5px #778DA9;
}



/** vista Asignar Categorías **/
div.asignoCategorias {
  display: flex;
  justify-content: space-between;
}

/** Vista de mostrar todas las peliculas **/

.all-movies {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.page-div {
  display: flex;
  justify-content: center;
  
}

.pages {

  display: flex;
  justify-content: center;
  align-items: center;
  margin: 20px;
}

.page-container {
  width: 50%;
  display: flex;
  justify-content: space-around;
  flex-wrap: wrap;
  align-self: start;

  padding: 20px
}

.page-container .movie-card {
  width: auto;
  padding: 10px;

}

.page-container .movie-card figure {
  padding: 0;
  margin: 0;

}

.page-container .movie-card figure img {
  object-fit: fill;
}

.input-pages {
  text-align: center;
  font-size: 14px;
  width: auto;
  padding: 10px 0;
}

.pages-numbers {
  display: flex;
  align-items: center;
  justify-content: space-around;
  margin: 0 10px;
}

.pages-numbers p {
  color: #3d3f42;
  margin: 0 5px;
}

.page-container .content-loader {
  margin: 10px 10px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
}


/** Inicio sesion **/

.sign-in-background {
  height: 100vh;
  padding: 25px 0 0 0;
  background-image: url(../public/fondo-registro.jpg);
  background-position: center;
  background-size: cover;
}

.sign-in-container {
  display: flex;
  justify-content: center;
  width: 100%;
}

.sign-in {
  align-items: center;
  width: 60%;
  display: flex;
  flex-direction: row;
  justify-content: center;
  border-radius: 30px;
  filter: drop-shadow(0 0 1em #778DA9);
}

.sign-in-first {
  width: 80%;
  padding: 100px 40px;
  background-color: white;
  color: #1B263B;
  border-radius: 30px 0px 0px 30px;
}


.sign-in-first button {
  align-self: center;
  width: 40%;
  background-color: #778DA9;
  border: 2px solid #0D1B2A;
  margin-top: 20px;
  border-radius: 30px;
}

.sign-in-first button:hover {
  background-color: #0D1B2A;
}

.sign-in-second {
  background-color: #1B263B;
  height: 100%;
  width: 50%;
  text-align: center;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  border-radius: 0px 30px 30px 0px;
}

.sign-in-second p {
  margin: 0px 20px;
}

.sign-in form {
  display: flex;
  flex-direction: column;
}


.sign-in-inputs {
  align-self: center;
  height: 50px;
  width: 70%;
  background-color: white;
  border: 0px;
  filter: drop-shadow(0 0 1em #778DA9);
  padding-left: 40px;
  color: #1b263b;
  border-radius: 30px;
}



#input-username {
  margin: 30px 0px;
}

#input-password {
  margin-bottom: 15px;
}

.remember-me label {
  margin: 0px 20px 0px 0px;
}

.remember-me {
  margin: 0px 0px 20px 0;
}

.register-div {
  display: flex;
  align-items: center;
  justify-content: center;
  margin-top: 20px;
}

.register-div p {
  margin: 0px 5px;
}
/** Cierre de Sesion **/
.signOut
/** Vista registro **/

.register {
  padding: 25px 0 0 0;
  min-height: 100vh;
  background-image: url(../public/fondo-registro.jpg);
  background-position: center;
  background-size: cover;
}

.register-container {
  display: flex;
  justify-content: center;
  align-items: center;
}

.register-container input {
  width: 50%;
  align-self: center;
  height: 50px;
  padding-left: 40px;
  border-radius: 30px;
  color: #1b263b;
  filter: drop-shadow(0 0 1em #778DA9);
  background-color: white;
  margin: 15px 0px
}

.register-seccion1 {
  display: flex;
  flex-direction: row;
  align-self: center;
  width: 100%;
  justify-content: space-evenly;
}

.register-seccion1 div {
  display: flex;
  flex-direction: column;
  align-items: center;
  text-align: center;
}

.register-seccion1 div input {
  align-self: center;
  width: 100%;
}

.register-seccion1 p {
  text-align: center;
  width: 50%;
}

.register-container p {
  font-size: small;
  color: red;
  margin: 4px 0px 15px 0px;
}

.error-input {
  background-color: white;
  border: 1px solid red;

}

.modal-content-register {
  align-items: center;
  display: flex;
  justify-content: center;
  flex-direction: column;
  width: auto;
  height: 100%;
}

.modal-content-register img{
  width: 100px;
  height: auto;
}

.register-container form {
  display: flex;
  flex-direction: column;
  width: 60%;
  align-self: center;
  filter: drop-shadow(0 0 1em #778DA9);
  background-color: white;
  border-radius: 30px;
  color: #1b263b;
  padding: 40px 0;
}

.register-container .date-container label {
  margin: 0px 5px 0px 0px;
}


.register-input {
  border: 0px;
}


.new-button {
  align-self: center;
  width: 40%;
  background-color: #778DA9;
  border: 2px solid #0D1B2A;
  margin-top: 20px;
  border-radius: 30px;
}

.new-button:hover {
  background-color: #0D1B2A;
}

/** Vista confirmacion cuenta **/

.confirm-email-conteiner {
  background-color: #415A77;
  height: 100vh;
}

.confirm-email-content {
  display: flex;
  flex-direction: column;
  justify-content: center;
  width: 100%;
  text-align: center;
  padding: 0;
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
}

.confirm-email-content img {
  width: 20%;
  align-self: center;
}

.confirm-email {
  background-color: #0D1B2A;
  width: 30%;
  height: auto;
  align-self: center;
  display: flex;
  flex-direction: column;
  justify-content: center;
  color: white;
  border-radius: 30px;
  box-shadow: 0px 20px 30px rgba(0, 0, 0, 0.7);
}

.confirm-email button {
  width: 40%;
  height: 60px;
  background-color: #415A77;
  border-radius: 10px;
  border: 2px solid white;
  color: white;
  align-self: center;
  margin: 30px;
}

.confirm-email button a {
  text-decoration: none;
  color: white
}

/** Categorias **/

.categories-compare{
  display: flex;
  flex-direction: column;
  justify-content: space-around;
}

.compare-details{
  display: flex;
  flex-direction: row;
  width: 80%;
  height: 60vh;
  justify-content: center;
  border-radius: 20px;
  align-self: center;
  margin: 20px 0px;
}


.compare-details-titles{
  background-color: white;
  width: 50%;
  border-radius: 20px 0px 0px 20px;
  text-align: center;
  padding-left: 20px;
}

.compare-details-titles h5{
  color: #61635d;
}

.compare-details-titles h3{
  margin: 0;
}
.compare-details-figure{
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  width: 70%;
  position: relative;
  height: 100%;
  
}

.compare-details-figure figure{
  width: 100%;
  height: 100%;
  margin: 0;
  position: relative;
  

}

.compare-details-figure figure div{
  position: absolute;
  width: 100%;
  height: 100%;
  text-align: left;
  display: flex;
  justify-content: end;
  flex-direction: column;
  align-items: flex-start;
  margin: 0;
  border-radius: 0px 30px 30px 0px;
  background: rgba(0, 0, 0, 0.3);
}

.compare-details-figure figure div button{
  margin-left: 30px;
  margin-bottom: 30px;
}

.compare-details-figure figure div h2{
  margin-left: 30px;
}

.compare-details-figure figure div p{
  margin-left: 30px;
  border: 1px solid white;
  width: 6%;
  text-align: center;
  align-self: left;
}

.compare-details-figure figure img{
  width: 100%;
  height: 100%;
  border-radius: 0px 30px 30px 0px;
  object-fit: cover;
}

.image-compare{
  height: 100%;
  object-fit: fill;
}

.second-figure figure div{
  display: flex;
  align-items: flex-end;
  
}

.second-figure figure div p{
  margin-right: 30px;
  
}

.second-figure figure div h2{
  margin-right: 30px;
  
}

.second-figure figure div button{
  margin-right: 30px;
  
}

.second-figure figure img{
  border-radius: 30px 0px 0px 30px;
}

.second-figure figure div{
  border-radius: 30px 0px 0px 30px;
}

.second-titles{
  border-radius: 0px 30px 30px 0px;
  
}

/** Tablet **/

@media (min-width:425px) and (max-width:768px) {
  .movie-second-div {
    flex-direction: column;
  }
  .movie-details-description{
    width: auto;
  }
  .movie-second-div .image-details {
    width: 100%;
  }

  .movie-second-div .image-details img {
    width: auto;
    height: 40vh;

  }

  .movie-second-div .description {
    margin: 10px 0;
    text-align: center;
    width: 100%;
  }

  .movie-third-div {
    width: 100%;
    justify-content: center;
    padding: 0;
  }

  .loadingImage {
    width: 70%;
    height: 40vh;
  }

  .loading-tilte {
    width: 100%;
    height: 10vh;
  }



  .movie-second-info {
    width: auto;
  }

  .movie-second-info h2 {
    text-align: center;
  }

  .bloque_img{
    display: none;
  }


}



@media (min-width:320px) and (max-width:425px) {
  header {
    flex-direction: column;
    align-items: center;
  }

  .caracteristica-item {
    display: flex;
    width: 98vw;
    flex-direction: column;
}

  .headerContainer img {
    height: 130px;
    width: 200px;
  }

  .headerUsuario {
    flex-direction: column;
    justify-content: space-around;
    height: 145px;
  }

  .headerUsuario {
    padding: 0;
    margin: 0;
  }

  .headerUsuario button {
    font-size: 12px;
  }

  .iconosFooter {
    justify-content: space-evenly;
    width: 20vw;
    flex-direction: row;
  }

  .iconosFooter a {
    margin-right: 6px;
  }

  .movie-second-div {
    flex-direction: column;
  }

  .movie-second-div .image-details {
    width: 100%;
  }

  .movie-second-div .image-details img {
    width: auto;
    height: 40vh;

  }

  .movie-second-div .description {
    margin: 10px 0;
    text-align: center;
    width: 100%;
  }

  .movie-third-div {
    width: 100%;
    justify-content: center;
    padding: 0;
  }
  .movie-details-features {
    display: flex;
    font-weight: 600;
    margin-top: 13vh;
    margin-bottom: 10vh;
    color: #000;
}
  .loadingImage {
    width: 70%;
    height: 40vh;
  }

  .loading-tilte {
    width: 100%;
    height: 10vh;
  }

  .ocultoEnMovil{
    display: none;
  }

  .movie-card-cartelera {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 60vw;
}
.movie-details-related {
  display: none;
}
}

Archivo: G:\Mochila\DH CTD 1er año\Proyecto Integrador\equipo-9\cine-front\src\main.jsx

import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'
import './index.css'
import { BrowserRouter, Routes, Route } from "react-router-dom"
import Home from './routes/home.jsx'
import ShowMore from './routes/ShowMore.jsx'
import MovieDetails from './routes/MovieDetails.jsx'
import AdministrationPanel from './routes/AdministrationPanel.jsx'
import SignIn from './routes/SignIn.jsx'
import SignOut from './routes/SignOut.jsx'
import Register from './routes/Register.jsx'
import ListadoPeliculas from './components/ListadoPeliculas.jsx'
import GestionAdmin from './components/GestionAdmin.jsx'
import ListadoCategorias from './components/ListadoCategorias.jsx'
import NuevaCategoria from './components/Nueva-categoria.jsx'
import AsignarCategoria from './components/AsignarCategoria.jsx'
import ConfirmAccount from './routes/ConfirmAccount.jsx'
import Categories from './routes/Categories.jsx'
import PerfilDropdown from './routes/PerfilDropDown.jsx'

ReactDOM.createRoot(document.getElementById('root')).render(
  <BrowserRouter>
    <Routes>
      <Route path='/confirmar-cuenta' element={<ConfirmAccount />} />
      <Route path='/' element={<App />}>
        <Route path='/' element={<Home />} />
        <Route path='categorias' element={<Categories/>} />
        <Route path='peliculas/pagina/:id' element={<ShowMore />} />
        <Route path='peliculas/:id' element={<MovieDetails />} />
        <Route
          path='/admin' element={<GestionAdmin />}>
          <Route path='/admin/ListadoPeliculas' element={<ListadoPeliculas />} />
          <Route path='/admin/nueva-pelicula' element={<AdministrationPanel />} />
          <Route path='/admin/ListadoCategorias' element={<ListadoCategorias />} />
          <Route path='/admin/nueva-categoria' element={<NuevaCategoria />} />
          <Route path='/admin/asignar-categoria' element={<AsignarCategoria />} />
        </Route>
        <Route path='perfil' element={<PerfilDropdown />} />
        <Route path='inicio-sesion' element={<SignIn />} />
        <Route path='registrarse' element={<Register />} />
        <Route path='cerrar-sesion' element={<SignOut />} />  
      </Route>
    </Routes>
  </BrowserRouter>
)


Archivo: G:\Mochila\DH CTD 1er año\Proyecto Integrador\equipo-9\cine-front\src\routes\AdministrationPanel.jsx

import { useState } from "react";
import DatePicker from "react-multi-date-picker";
import DatePanel from "react-multi-date-picker/plugins/date_panel";
import Modal from "react-modal"

import { fetchCategorias, newMovie } from "../components/UseFetch";
import MultipleImageDrop from "../components/AdministrationPanel/multipleImageDrop";
import SingleImageDrop from "../components/AdministrationPanel/singleImageDrop";
import { useEffect } from "react";
import { format, isValid } from "date-fns";

Modal.setAppElement('#root')



function AdministrationPanel() {
    const [title, setTitle] = useState('')
    const [description, setDescription] = useState('')
    const [selectedCategories, setSelectedCategories] = useState([])
    
    const [selectedDates, setSelectedDates] = useState([new Date()])
    const [image, setImage] = useState(null)
    const [banner, setBanner] = useState(null)
    const [gallery, setGallery] = useState([])
    const [multipleUrl, setMultipleUrl] = useState([])
    const [errorMessage, setErrorMessage] = useState('')
    const [showConfirmation, setShowConfirmation] = useState(false);
    const [isLoading, setIsLoading] = useState(true)
    const [sala, setSala] = useState('')
    const [duration, setDuration] = useState('')
    const [type, setType] = useState('')
    const [clasification, setClasification] = useState('')
    const [lenguage, setLenguage] = useState('')
    const [director, setDirector] = useState('')
    const [actors, setActors] = useState('')
    const [trailer,setTrailer] = useState('')

    useEffect(() => {

        setShowConfirmation(true)
        setErrorMessage('Cargando categorias...')
        const fetchAllCategories = async () => {
            try {
                const categories = await fetchCategorias()
                if (categories) {
                    const updatedCategorias = categories.map(categoria => ({
                        ...categoria,
                        selected: false
                    }));
                    setSelectedCategories(updatedCategorias);
                    setIsLoading(false);
                    setErrorMessage('')
                    setShowConfirmation(false)
                    console.log(selectedCategories)
                }

            } catch (error) {
                console.error(error)
                setIsLoading(false);
                setErrorMessage('')
                setShowConfirmation(false)
            }
        };

        fetchAllCategories()
    }, [])

    const customSyles = {
        overlay: { zIndex: 1000 }
    }

    const onChangeTitle = (e) => {
        setTitle(e.target.value)
    }

    const onChangeDescription = (e) => {
        setDescription(e.target.value)
    }

    
    

    const closeModal = () => {
        setShowConfirmation(false)
    }

    const uploadCloudinary = async (image) => {
        try {
            console.log(image)
            const formData = new FormData()
            formData.append('file', image)
            formData.append('upload_preset', 'wxfnshym')
            formData.append('api_key', '533874313672784')

            const response = await fetch('https://api.cloudinary.com/v1_1/dmnjesfeg/image/upload', {
                method: 'POST',
                body: formData,
            })

            const result = await response.json();
            const imageUrl = result.secure_url;
            console.log(imageUrl)
            return imageUrl;


        } catch (error) {
            console.error(error)
            return false
        }
    }

    const uploadMultipleCloudinary = async () => {
        return gallery.map(async (image, index) => {
            try {
                const formData = new FormData()
                formData.append('file', image.file)
                formData.append('upload_preset', 'wxfnshym')
                formData.append('api_key', '533874313672784')

                const response = await fetch('https://api.cloudinary.com/v1_1/dmnjesfeg/image/upload', {
                    method: 'POST',
                    body: formData,
                })

                const result = await response.json();
                console.log(result.secure_url)
                setMultipleUrl((prevUrlList) => [...prevUrlList, result.secure_url])

                if (gallery.length - 1 == index)
                    return true;
            } catch (error) {
                console.error(error)
                return false
            }
        })
    }

    const fetchNewMovie = async (url, bannerUrl) => {

        try {
            selectedDates.map(date => console.log(format(date,'yyyy-MM-dd')))
            const data = {
                titulo: title,
                trailer: trailer,
                portada: url,
                banner: bannerUrl,
                descripcion: description,
                caracteristicas: {
                    sala: sala,
                    modalidad: type,
                    reparto: actors,
                    duracion: duration,
                    clasificacion: clasification,
                    opcionesIdioma: lenguage,
                    director: director
                },
                imagenes: multipleUrl.map((url) => ({imagen: url})),
                categorias: selectedCategories.filter((category) => category.selected == true)
                .map((category) => ({titulo: category.titulo})),
                fechas: selectedDates.map((date) => ({ fecha: format(new Date('2022-07-23'), 'yyyy-MM-dd') }))
            };
            const jsonData = JSON.stringify(data);
            console.log(jsonData);


            const response = await newMovie(data)
            console.log(response)
            if (response == true) {
                setErrorMessage("Se cargo la pelicula correctamente.")
                setTimeout(() => {
                    setTitle('')
                    setDescription('')
                    setSelectedCategories([])
                    setSelectedDates([])
                    setShowConfirmation(false)
                    setImage(null)
                    setBanner(null)
                    setSelectedCategories([])
                    setSelectedDates([])
                    setGallery([])
                    setMultipleUrl([])
                    setSala('')
                    setType('')
                    setTrailer('')
                    setDuration('')
                    setLenguage('')
                    setActors('')
                    setClasification('')
                    setDirector('')
                }, 2000)
            } else {
                setErrorMessage("Error al cargar la pelicula.")
                setTimeout(() => {
                    setShowConfirmation(false)
                }, 2000)
            }
        } catch (error) {
            console.log(error)
            setErrorMessage("Error al cargar la pelicula.")
            setTimeout(() => {
                setShowConfirmation(false)
            }, 2000)
        }

    }

    const handleSubmit = async (e) => {
        e.preventDefault();
        setErrorMessage("Cargando...")
        setShowConfirmation(true)

        if (!title || !selectedCategories.length || !description || !selectedDates || !selectedCategories 
            || !image || !gallery || !banner || !sala || !duration || !type || !clasification || ! lenguage 
            || !director || !actors || !trailer) {
            setErrorMessage("Todos los campos son requeridos.");
            setTimeout(() => {
                setShowConfirmation(false)
            }, 2000)
            return;
        }

        const currentDate = new Date();
        selectedDates.map((date) => {
            const newDate = new Date(date)
            if (date < currentDate) {
                setErrorMessage("La fechas deben ser iguales o posteriores a la fecha actual")
                if(isValid(newDate)){
                    console.log('valido'); // Formatear fecha válida
                } else {
                    console.log('invalido'); // Usar fecha predeterminada para fechas inválidas
                }
                setTimeout(() => {
                    setShowConfirmation(false)
                }, 2000)
                return
            }
        })



        const imageUpload = await uploadCloudinary(image)
        const bannerUpload = await uploadCloudinary(banner)
        const galleryUpload = await uploadMultipleCloudinary()

        if (imageUpload == false || bannerUpload == false || galleryUpload == false) {
            setErrorMessage("Error al subir las imagenes.")
            setTimeout(() => {
                setShowConfirmation(false)
            }, 2000)
            return
        } else {

            setTimeout(() => {
                if ((imageUpload == "" || null) || (bannerUpload == "" || null)) {
                    setErrorMessage("Error al subir las imagenes.")
                
                    setMultipleUrl([])
                    setTimeout(() => {
                        setShowConfirmation(false)
                    }, 2500)
                    return
                } else {
                    fetchNewMovie(imageUpload, bannerUpload)
                }

            }, 1000)

        }



    }

    const onChangeSala = (e) => {
        setSala(e.target.value)
    }
    const onChangeDuration = (e) => {
        setDuration(e.target.value)
    }
    const onChangeClasification = (e) => {
        setClasification(e.target.value)
    }
    const onChangeLenguage = (e) => {
        setLenguage(e.target.value)
    }

    const onChangeActors = (e) => {
        setActors(e.target.value)
    }

    const onChangeDirector = (e) => {
        setDirector(e.target.value)
    }

    const onChangeType = (e) => {
        setType(e.target.value)
    }

    const onChangeTrailer = (e) => {
        setTrailer(e.target.value)
    }

    const handleCategoriesChange = (categoriaId) => {
       
        const updatedCategorias = selectedCategories.map(categoria => {
            if (categoria.id === categoriaId) {
              return {
                ...categoria,
                selected: !categoria.selected
              };
            }
            return categoria;
          });
      
          console.log(updatedCategorias)
      
          setSelectedCategories(updatedCategorias);
    };



    return (
        <div>
            {!isLoading && (
                <div className="admin-form">
                    <form onSubmit={handleSubmit}>
                        <div className="admin-div">
                            <div className="admin-div-first">
                                <label>Titulo:</label>
                                <input
                                    className="form-title"
                                    type="text"
                                    placeholder="Titulo de pelicula"
                                    value={title}
                                    onChange={onChangeTitle}
                                />
                                <label>Generos:</label>
                                <div className="categories-form">
                                    {selectedCategories.length > 0 && selectedCategories.map((categorie,index) => (
                                        <label key={categorie.id}>
                                            <input type="checkbox"  
                                            value={categorie.id} 
                                            checked={categorie.selected}
                                                onChange={() => handleCategoriesChange(categorie.id)} />
                                            {categorie.titulo}
                                        </label>
                                    ))}
                                </div>
                                <label>Descripcion</label>
                                <input
                                    className="form-description"
                                    type="text"
                                    placeholder="Descripcion"
                                    value={description}
                                    onChange={onChangeDescription}
                                />
                                <label>Director</label>
                                <input
                                className="form-title"
                                    type="text"
                                    placeholder="Director"
                                    value={director}
                                    onChange={onChangeDirector}
                                />
                                <label>Reparto</label>
                                <input
                                    className="form-title"
                                    type="text"
                                    placeholder="Reparto"
                                    value={actors}
                                    onChange={onChangeActors}
                                />
                                <label>Trailer</label>
                                <input
                                    className="form-title"
                                    type="text"
                                    placeholder="Url del trailer"
                                    value={trailer}
                                    onChange={onChangeTrailer}
                                />

                                <div className="date-container">
                                    <label>Fecha:</label>
                                    <div className="date-center">
                                        <DatePicker
                                            className="date-picker"
                                            multiple
                                            selected={selectedDates}
                                            onChange={setSelectedDates}
                                            format={"YYYY-MM-DD"}
                                            plugins={[
                                                <DatePanel />
                                            ]}
                                        />
                                    </div>
                                </div>
                            </div>
                            <div className="admin-div-last">
                                <div>
                                    <label>Sala</label>
                                    <input
                                        type="text"
                                        placeholder="Sala"
                                        value={sala}
                                        onChange={onChangeSala}
                                    />
                                </div>
                                <div>
                                    <label>Modalidad</label>
                                    <input
                                        type="text"
                                        placeholder="Modalidad"
                                        value={type}
                                        onChange={onChangeType}
                                    />
                                </div>
                                <div>
                                    <label>Duracion</label>
                                    <input
                                        type="text"
                                        placeholder="Duracion"
                                        value={duration}
                                        onChange={onChangeDuration}
                                    />
                                </div>

                                <div>
                                    <label>Clasificacion</label>
                                    <input
                                        type="text"
                                        placeholder="Clasificacion"
                                        value={clasification}
                                        onChange={onChangeClasification}
                                    />
                                </div>
                                <div>
                                    <label>Idioma</label>
                                    <input
                                        type="text"
                                        placeholder="Idioma"
                                        value={lenguage}
                                        onChange={onChangeLenguage}
                                    /></div>

                            </div>
                        </div>



                        <label>Portada:</label>
                        <SingleImageDrop
                            image={image}
                            setImage={setImage}
                        />
                        <label>Banner:</label>
                        <SingleImageDrop
                            image={banner}
                            setImage={setBanner}
                        />
                        <label>Galeria:</label>
                        <MultipleImageDrop
                            gallery={gallery}
                            setGallery={setGallery}
                        />
                        <button type="submit">Guardar</button>



                    </form>

                    <Modal
                        isOpen={showConfirmation}
                        onRequestClose={closeModal}
                        contentLabel="Confirmacion"
                        className="modal"
                        style={customSyles}
                    >

                        <div className="modal-conteiner">
                            <div className="modal-content">
                                {errorMessage}
                            </div>
                        </div>
                    </Modal>
                </div>
            )
            }

        </div>)
}

export default AdministrationPanel;


Archivo: G:\Mochila\DH CTD 1er año\Proyecto Integrador\equipo-9\cine-front\src\routes\Categories.jsx

import { useEffect, useRef, useState } from "react";
import { fetchCategorias } from "../components/UseFetch";
import Categorie from "../components/utils/Categorie";
import { searchMoviesForCategories } from "../components/UseFetch";
import { Link } from "react-router-dom";

function Categories() {

    const divRef = useRef(null);
    const [showCategorie, setShowCategorie] = useState("No mostrar");
    const [categories, setCategories] = useState([])
    const [isLoading, setIsLoading] = useState(true)
    const [isLoadingMovies, setIsLoadingMovies] = useState(true)
    const [movies, setMovies] = useState([])
    const [index, setIndex] = useState(0)
    const [actualPage, setActualPage] = useState(1)

    useEffect(() => {
        const allCategories = async () => {
            setIsLoading(true)
            try {
                const response = await fetchCategorias()
                console.log(response)
                const rta = response.sort((a, b) => {
                    if (a.titulo < b.titulo) { return -1 }
                    if (a.titulo > b.titulo) { return 1 }
                    return 0;
                })
                console.log(rta)
                if (response) {
                    setIsLoading(false)
                    setCategories(rta)
                }
            } catch (error) {
                console.log(error)
            }
        }
        allCategories()
    }, [])

    useEffect(() => {
        const changeCategorie = async () => {
            setIsLoadingMovies(true)
            try {
                setIndex(0)
                const movieForCategorie = await searchMoviesForCategories(showCategorie)
                if (movieForCategorie) {
                    setActualPage(1)
                    setMovies(movieForCategorie);
                    setIsLoadingMovies(false)
                }


                console.log(movies)
                console.log(Math.ceil(8 / 2))

            } catch (error) {
                console.log(error)
            }
        }

        changeCategorie()
    }, [showCategorie])

    const updateCategorie = (categorieName) => {
        setShowCategorie(categorieName)
    }

    const btnpressprev = () => {
        let width = divRef.current.offsetWidth;
        divRef.current.scrollLeft = divRef.current.scrollLeft - width;
        console.log(width)
    }

    const btnpressnext = () => {
        let width = divRef.current.offsetWidth;
        divRef.current.scrollLeft = divRef.current.scrollLeft + width;
        console.log(width)
    }

    const handleInputChange = (e) => {
        const newPage = parseInt(e.target.value, 10);
        if (newPage >= 1 && newPage < pages) {
            setActualPage(newPage)
        }
    }

    const prevPage = () => {
        if (actualPage > 1) {
            setActualPage(actualPage - 1)
            if (index - 2 < 0) {
                setIndex(0)
            } else {
                setIndex(index - 2)
            }

        }
    }

    const nextPage = () => {
        if (actualPage < Math.ceil(movies.length / 2)) {
            setActualPage(actualPage + 1)
            if (index + 2 > movies.length - 1) {
                setIndex(movies.length - 1)
            } else {
                setIndex(index + 2)
            }
        }
    }

    const amountOfPages = () => {
        return (
            <div className="pages">
                <img className='first-button' src="/icons/atras.svg" onClick={prevPage} />
                <div className="pages-numbers">
                    <input
                        type="number"
                        readOnly
                        min="1"
                        max={Math.floor(movies.length / 2)}
                        value={actualPage}
                        onChange={handleInputChange}
                        className="input-pages"
                    />
                    <p>de</p>
                    <p>{Math.ceil(movies.length / 2)}</p>
                </div>
                <img className='last-button' src="/icons/adelante.svg" onClick={nextPage} />
            </div>
        )
    }


    return (
        <div >
            {!isLoading && (
                <div className="categories-section">
                    <img className='first-button' src="/icons/atras.svg" onClick={btnpressprev} />
                    <div className="carrousel-slider" ref={divRef}>
                        {categories.map(categorie => (
                            <Categorie
                                value={showCategorie}
                                updateFather={updateCategorie}
                                key={categorie.id}
                                name={categorie.titulo}
                                image={categorie.urlImagen}
                            />
                        ))}
                    </div>
                    <img className='last-button' src="/icons/adelante.svg" onClick={btnpressnext} />
                </div>

            )}
            {!isLoadingMovies && (
                <div className="categories-compare">
                    <div className="compare-details">
                        <div className="compare-details-titles">
                            <h5>Sala</h5>
                            <h3>{movies[index].caracteristicas.sala}</h3>
                            <h5>Modalidad</h5>
                            <h3>{movies[index].caracteristicas.modalidad}</h3>
                            <h5>Duracion</h5>
                            <h3>{movies[index].caracteristicas.duracion}</h3>
                            <h5>Idioma</h5>
                            <h3>{movies[index].caracteristicas.opcionesIdioma}</h3>
                            <h5>Director</h5>
                            <h3>{movies[index].caracteristicas.director}</h3>
                        </div>
                        <div className="compare-details-figure">
                            <figure>
                                <div>
                                    <p>{movies[index].caracteristicas.clasificacion}</p>
                                    <h2>{movies[index].titulo.toUpperCase()}</h2>
                                    <Link key={movies[index].id} to={`/peliculas/${movies[index].id}`}>
                                        <button>Detalles</button>
                                    </Link>
                                </div>
                                <img
                                    src={movies[index].banner}
                                />
                            </figure>
                        </div>
                    </div>
                    {!(movies.length - 1 < index + 1) &&
                        (<div className="compare-details">
                            <div div className="compare-details-figure second-figure">
                                <figure>
                                    <div>
                                        <p>{movies[index+1].caracteristicas.clasificacion}</p>
                                        <h2>{movies[index+1].titulo.toUpperCase()}</h2>
                                        <Link key={movies[index+1].id} to={`/peliculas/${movies[index+1].id}`}>
                                            <button>Detalles</button>
                                        </Link>
                                    </div>

                                    <img className="imagen-compare"
                                        src={movies[index + 1].banner}
                                    />
                                </figure>
                            </div>

                            <div className="compare-details-titles second-titles">
                                <h5>Sala</h5>
                                <h3>{movies[index + 1].caracteristicas.sala}</h3>
                                <h5>Modalidad</h5>
                                <h3>{movies[index + 1].caracteristicas.modalidad}</h3>
                                <h5>Duracion</h5>
                                <h3>{movies[index + 1].caracteristicas.duracion}</h3>
                                <h5>Idioma</h5>
                                <h3>{movies[index + 1].caracteristicas.opcionesIdioma}</h3>
                                <h5>Director</h5>
                                <h3>{movies[index + 1].caracteristicas.director}</h3>
                            </div>

                            

                        </div>)}

                    {amountOfPages()}
                </div>
            )}

        </div>
    )
}

export default Categories;

Archivo: G:\Mochila\DH CTD 1er año\Proyecto Integrador\equipo-9\cine-front\src\routes\ConfirmAccount.jsx

import { useEffect, useState } from "react";
import { useLocation } from "react-router-dom";
import { confirmAccount } from "../components/UseFetch";




function ConfirmAccount() {
    const [message, setMessage] = useState('')
    const location = useLocation()
    const searchParam = new URLSearchParams(location.search);
    const token = searchParam.get('token')

    useEffect(() => {
        const accountConfimation = async () => {
            try {
                const response = await confirmAccount(token)
    
                if (response != false && response != null) {
                    console.log(response)
                    setMessage(response)
                } else{
                    setMessage("Hubo un error")
                }
            } catch (error) {
                setMessage("Hubo un error.")
            }
        }
    
        accountConfimation();
    },[])



    return (
        <div className="confirm-email-conteiner">
            <div className="confirm-email-content">
                <img src="./icons/dhcinema2-logo.png" />
                <div className="confirm-email">
                    <h1>Confirmación de cuenta</h1>

                    {message}

                    <button><a href="http://localhost:5173/">VOLVER A DHCINEMA</a></button>
                </div>

            </div>

        </div>);
}

export default ConfirmAccount;

Archivo: G:\Mochila\DH CTD 1er año\Proyecto Integrador\equipo-9\cine-front\src\routes\Home.jsx

import React, { useState, useRef } from "react"
import categories from "../components/utils/categories.json"
import Categorie from "../components/utils/Categorie"
import Billboard from "../components/home/Billboard"
import Recommended from "../components/home/Recommended"
import { useEffect } from "react"


function Home() {
    
 
    const [index, setIndex] = useState(0);
    const timeRef = useRef(null)
    const mod = (n, m) => {
        let result = n % m;
        return result >= 0 ? result : result + m;
    };
    
    useEffect(() => {
        window.scrollTo(0, 0);
        
    },[])

    const cards = [
        {
            id: "1",
            name: "SUPER MARIO BROS",
            generos: "Aventura",
            time: "2h 10m",
            image: "https://image.tmdb.org/t/p/original/9n2tJBplPbgR2ca05hS5CKXwP2c.jpg",
        },
        {
            id: "2",
            name: "JOHN WICK 4",
            generos: "Accion",
            time: "2h 10m",
            image: "https://image.tmdb.org/t/p/original/7I6VUdPj6tQECNHdviJkUHD2u89.jpg",
        },
        {
            id: "3",
            name: "SISU",
            generos: "Accion",
            time: "2h 10m",
            image: "https://image.tmdb.org/t/p/original/7wGbeXTCW83nQAOw1sbAhA7oKiS.jpg",
        },
    ];

    useEffect(() => {
        if(timeRef.current !=null)
            clearTimeout(timeRef.current);
        const timer = setTimeout(() => {
            setIndex((prevIndex) => mod(prevIndex + 1, cards.length));
        }, 3000);

        timeRef.current = timer;

        return () => clearTimeout(timeRef.current);
    }, [index]);

    const handleClickRight = () => {
        setIndex((prevIndex) => mod(prevIndex + 1, cards.length));
    }

    const handleClickLeft = () => {
        setIndex((prevIndex) => mod(prevIndex-1,cards.length))
    }

    const handleMouseEnter = () => {
        clearTimeout(timeRef.current);
    };

    const handleMouseLeave = () => {
        if (timeRef.current) {
            clearTimeout(timeRef.current);
            timeRef.current = setTimeout(() => {
              setIndex((prevIndex) => mod(prevIndex + 1, cards.length));
            }, 3000);
        }
    };



    const updateCategorie = (value) => {
        setShowCategorie(value);
    }

    

    return (

        <div className="home-section">
            <div className="carousel-section">
                <div className="carousel">
                    {cards.map((item, i) => {
                        const indexLeft = mod(index - 1, cards.length);
                        const indexRight = mod(index + 1, cards.length);

                        let className = "card";

                        if (i === index) {
                            className = "card card--active";
                          } else if (i === mod(index + 1, cards.length)) {
                            className = "card card--right";
                          } else if (i === mod(index - 1, cards.length)) {
                            className = "card card--left";
                        }

                        return (
                            <div className={className}
                                onClick={() => {
                                    if (className === "card card--right") {
                                        handleClickRight();
                                      } else if (className === "card card--left") {
                                        handleClickLeft();
                                      }
                                }}
                                onMouseEnter={handleMouseEnter}
                                onMouseLeave={handleMouseLeave}
                                key={item.id}>
                                <figure>
                                    <div>
                                        <h4>DESTACADOS</h4>
                                        <h1>{item.name}</h1>
                                        <h3>{item.generos} - {item.time}</h3>
                                        <button>Detalles</button>
                                        <button>Reservar Ahora</button>
                                    </div>
                                    <img
                                        src={item.image}
                                        alt="Desctacados"
                                    ></img>
                                </figure>
                            </div>

                        );
                    })}
                </div>
            </div>

            

            <Billboard  />
            <Recommended />


        </div>
    )
}

export default Home


Archivo: G:\Mochila\DH CTD 1er año\Proyecto Integrador\equipo-9\cine-front\src\routes\MovieDetails.jsx

import { useEffect, useState } from "react"
import { searchMovieDetails, searchRandomMovies } from "../components/UseFetch"
import { useParams, useNavigate } from "react-router-dom"
import Modal from "react-modal"
import ContentLoader, { List } from "react-content-loader"
import ReactPlayer from "react-player"
import Item from "../components/Item"
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faClapperboard } from '@fortawesome/free-solid-svg-icons';




Modal.setAppElement('#root')

function MovieDetails() {
    window.scrollTo(0, 0);

    const [movie, setMovie] = useState(null)
    const [movies, setMovies] = useState([])
    const [isLoading, setIsLoading] = useState(true)
    const params = useParams()
    const [showVideo, setShowVideo] = useState(false);
    const [video, setVideo] = useState('')
    const [banner, setBanner] = useState({})
    const [first, setFirst] = useState([{}])
    const [last, setLast] = useState([{}])
    const [caracteristica, setCaracteristica] = useState([{}])
    const [showGallery, setShowGallery] = useState(false)
    const [imageId,setImageId] = useState(0)

    const customStyles = {
        overlay: { zIndex: 1000 }
    }


    useEffect(() => {

        const fetchMovieId = async () => {
            setIsLoading(true);
            try {
                const movieForId = await searchMovieDetails(params.id)
                const movieRandom = await searchRandomMovies()

                if (movieForId != false) {
                    console.log(movieForId)
                    setMovie(movieForId);
                    setBanner({
                        backgroundImage: `url(${movieForId.banner})`
                    })
                    setVideo(movieForId.trailer)
                    setFirst(movieForId.imagenes.slice(0, 1))
                    setLast(movieForId.imagenes.slice(1, 5))
                }
                if (movieRandom != false) {
                    setMovies(movieRandom)
                }
                if (movieForId != false) {
                    setCaracteristica(movieForId.caracteristicas);
                }

                setIsLoading(false);

            } catch (error) {
                console.error(error)
            }
        };
        fetchMovieId()
    }, [params.id])

    const handleCloseVideo = () => {
        setShowVideo(false)
    }

    const handleShowVideo = () => {
        if (showVideo == false)
            setShowVideo(true)
        else
            setShowVideo(false)
    }

    const handleShowGallery = () => {
        setImageId(0)
        setShowGallery(!showGallery)
    }


    const loadingImage = () => {
        return (

            <ContentLoader
                className="loadingImage"
                speed={2}
                width="100%"
                height="70vh"
                backgroundColor="#f3f3f3"
                foregroundColor="#ecebeb"
            >
                <rect x="0" y="0" rx="3" ry="3" width="100%" height="100%" />
            </ContentLoader>

        )



    }

    const loadingTitle = () => {
        return (

            <ContentLoader
                className="loading-tilte"
                speed={2}
                width="40%"
                height="8vh"
                backgroundColor="#f3f3f3"
                foregroundColor="#ecebeb"
            >
                <rect x="0" y="0" rx="3" ry="3" width="100%" height="100%" />
            </ContentLoader>

        )



    }

    const descriptionLoader = () =>
        <List
            speed={2}
            width="70vh"
            height="100%vh"
        />



    return (
        <div className={`movie-details `}>
            <div>
                <div className="banner-video" style={!isLoading ? banner : {}}>
                    <div className="banner-details">
                        <img className="play-icon" src="/icons/play_icon.svg" onClick={handleShowVideo} />
                        <div className="movie-first-info">
                            {!isLoading &&
                                <div className="movie-first-info-details">
                                    <img src={movie.portada} />
                                    <div>
                                        <h4>GENEROS </h4>

                                        {movie.categorias.map(categorias => (
                                            <p key={categorias.id}>{categorias.titulo}</p>
                                        ))}

                                    </div>
                                </div>
                            }
                        </div>
                        <div className="movie-details-title">
                            {!isLoading && <h1>{movie.titulo.toUpperCase()}</h1>}
                        </div>

                    </div>

                </div>
                <div className="movie-details-second">
                    <div className="movie-second-info">
                        {!isLoading && (
                            <div className="movie-details-description">
                                <div>
                                    <h2>DETALLES</h2>
                                    <p>{movie.descripcion}</p>
                                </div>
                                <div className="fechas-container">
                                    <h2>FECHAS</h2>
                                    <div>
                                        {movie.fechas.map(fechas => (
                                            <button key={fechas.id} className="dates-button">{fechas.fecha}</button>
                                        ))}
                                    </div>
                                </div>
                            </div>
                        )}
                        <div className="movie-details-related">
                            <h2>PELICULAS SIMILARES</h2>
                            <div className="movie-container">
                                {Array.isArray(movies) && movies.length > 0 ? (
                                    movies.slice(0, 4).map(movie => (
                                        <Item
                            
                                            key={movie.id}
                                            id={movie.id}
                                            name={movie.titulo}
                                            image={movie.portada}
                                        />
                                    ))
                                ) : null}
                            </div>
                        </div>
                    </div>
                </div>
                <div className="movie-details-features">
                    <div>
                        <div className="h2-movieDetails">
                            <h2>Que ofrece esta película?</h2>
                            <hr></hr>
                        </div>
                        <div className="caracteristicas-container">
                            {movie && movie.caracteristicas && (
                                <div className="caracteristica-item">
                                    <span> <FontAwesomeIcon icon={faClapperboard} /> Clasificacion: {movie.caracteristicas.clasificacion}</span>
                                    <span> <FontAwesomeIcon icon={faClapperboard} /> Director: {movie.caracteristicas.director}</span>
                                    <span> <FontAwesomeIcon icon={faClapperboard} /> Duracion: {movie.caracteristicas.duracion} minutos</span>
                                    <span> <FontAwesomeIcon icon={faClapperboard} /> Tipo de pantalla: {movie.caracteristicas.modalidad}</span>
                                </div>
                            )}
                        </div>
                    </div>
                </div>
                {!isLoading && (<div className="movie-second-div">
                    <div className="image-details">
                        <div className="grid-container bloque_img">
                    
                            <div className="half-left">
                                <img src={first[0].imagen} alt="Movie" />
                            </div>
                            <div className="half-right">
                                {last.map((movie) => (
                                    <div key={movie.id}>
                                        <img src={movie.imagen} alt="Movie" />
                                    </div>
                                ))}
                            
                            </div>
                            <div className="button-container">
                                <img src="/icons/show_more.svg" onClick={handleShowGallery}/>
                            </div>
                        </div>
                    </div>


                </div>)}

            </div>
            {!isLoading && (<Modal
                style={customStyles}
                className="video-modal"
                isOpen={showVideo}
                onRequestClose={handleCloseVideo}
                shouldCloseOnOverlayClick={false}
            >
                <div className="video-details">
                    <div className="detail-video-part">
                        <img src="/icons/close.svg" onClick={handleShowVideo} />
                    </div>
                    <ReactPlayer
                        width='100%'
                        height='100%'
                        url={!isLoading ? video : {}}
                    />
                </div>
            </Modal>)}
            
            {!isLoading && (
                <Modal
                style={customStyles}
                className="show-gallery-modal"
                isOpen={showGallery}
                onRequestClose={handleShowGallery}
                shouldCloseOnOverlayClick={false}
            >
                
                <div className="show-gallery-conteiner">
                    <div className="close-gallery">
                        <img src="/icons/close-black.svg" onClick={handleShowGallery} />
                    </div>
                    <div className="gallery-image">
                        <img src={movie.imagenes[imageId].imagen} />
                    </div>
                    <div className="carrousel-gallery">
                    {movie.imagenes.map((image,index) => (
                            <img onClick={() => {
                                console.log(index)
                                setImageId(index)
                                
                            }} key={index} src={image.imagen} />
                        ))}
                    </div>
                </div>
            </Modal>


            )}
            
        </div>
    )
}

export default MovieDetails;


Archivo: G:\Mochila\DH CTD 1er año\Proyecto Integrador\equipo-9\cine-front\src\routes\PerfilDropDown.jsx



const PerfilDropdown = () => {
    return (
        <div className="h1dropdown">
            <h1>Datos de perfil</h1>
            <div className="datosDropDown">
                <div className="nombreDropDown">
                <h3>Nombre: </h3> {sessionStorage.getItem('nombre')}
                </div>
                <div>
                <h3>Apellido: </h3> {sessionStorage.getItem('apellido')}
                </div>
                <div>
                <h3>Email: </h3> {sessionStorage.getItem('email')}
                </div>
            </div>
        </div>
    )
}


export default PerfilDropdown

Archivo: G:\Mochila\DH CTD 1er año\Proyecto Integrador\equipo-9\cine-front\src\routes\Register.jsx

import { useForm } from 'react-hook-form'
import * as yup from "yup"
import { yupResolver } from '@hookform/resolvers/yup'
import Modal from 'react-modal'
import { useState } from 'react'
import BounceLoader from "react-spinners/BounceLoader"
import { fetchRegisterUser } from '../components/UseFetch'
import { useNavigate } from 'react-router-dom'

Modal.setAppElement('#root')

const schema = yup.object({
    nombre: yup.string()
        .required('Se requiere un nombre.')
        .matches(/^[a-zA-ZÀ-ÿ\s]/, 'El nombre no puede poseer caracteres especiales o numeros.'),
    apellido: yup.string()
        .required('Se requiere un apellido.')
        .matches(/^[a-zA-ZÀ-ÿ\s]/, 'El nombre no puede poseer caracteres especiales o numeros.'),
    email: yup.string()
        .required('Se requiere un email.')
        .matches(/^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$/, 'Se requiere un email valido.'),
    confirmacionEmail: yup.string()
        .required('Se requiere este campo.')
        .matches(/^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$/, 'Se requiere un email valido.')
        .oneOf([yup.ref('email')], 'Los emails no coinciden entre si.'),
    password: yup.string()
        .required('Se requiere una contraseña.')
        .min(6, 'La contraseña debe ser mayor a 6 caracteres.'),
    contraseñaConfirmacion: yup.string()
        .required('Se requiere este campo.')
        .min(6, 'La contraseña debe ser mayor a 6 caracteres.')
        .oneOf([yup.ref('password')], 'Las contraseñas no coinciden entre si.'),
})

function Register() {
    const [showConfirmation, setShowConfirmation] = useState(false);
    const [message, setMessage] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [accepted, setAccepted] = useState(false);
    const navigate = useNavigate()

    const closeModal = () => {
        setShowConfirmation(false)
    }

    const customStyles = {
        overlay: { zIndex: 1000 }
    }

    window.scrollTo(0, 0);

    const { register, formState: { errors }, handleSubmit } = useForm({
        resolver: yupResolver(schema),
    });

    const onSubmit = async data => {
        setShowConfirmation(true);
        setIsLoading(true);
        const newData = data
        delete newData.confirmacionEmail;
        delete newData.contraseñaConfirmacion;
        try {

            const response = await fetchRegisterUser(newData);

            if (response != false && response != null) {
                console.log(response);
                if (response.includes('Ya existe')) {
                    setIsLoading(false);
                    setMessage(response);
                    setAccepted(false);
                    setTimeout(() => {
                        setMessage('')
                        setShowConfirmation(false);
                    }, 3500)
                } else {
                    setIsLoading(false);
                    setMessage(response);
                    setAccepted(true);
                    setTimeout(() => {
                        setMessage('')
                        setAccepted(false)
                        setShowConfirmation(false);
                        navigate("/inicio-sesion");
                    }, 3500)
                }

            } else {
                setIsLoading(false);
                setMessage(response);
                setAccepted(false);
                setTimeout(() => {
                    setMessage('')
                    setShowConfirmation(false);
                }, 3500)
            }
        } catch (error) {
            setIsLoading(false);
            setTimeout(() => {
                setMessage("Hubo un error con el registro. Vuelve a intentarlo.");
                setAccepted(false);
            }, 3500)
            setShowConfirmation(false);
        }
    }


    return (
        <div className='register'>
            <div className="register-container">
                <form onSubmit={handleSubmit(onSubmit)}>
                    <h3>Registro</h3>
                    <div className="register-seccion1">
                        <div>
                            <input
                                placeholder="Nombre"
                                type='text'
                                className={` ${errors.nombre ? 'error-input' : 'register-input'}`}
                                {...register('nombre')}
                                aria-invalid={errors.nombre ? "true" : "false"}

                            />
                            <p>{errors.nombre?.message}</p>
                        </div>
                        <div>

                            <input
                                className={`${errors.apellido ? 'error-input' : 'register-input'}`}
                                placeholder="Apellido"
                                type='text'
                                {...register('apellido')}
                                aria-invalid={errors.apellido ? "true" : "false"}
                            />
                            <p>{errors.apellido?.message}</p>
                        </div>
                    </div>
                    <div className='register-seccion2'>
                        <div>
                            <input
                                className={`${errors.email ? 'error-input' : 'register-input'}`}
                                placeholder="E-mail"
                                type='email'
                                {...register('email')}
                                aria-invalid={errors.email ? "true" : "false"}
                            />
                            <p>{errors.email?.message}</p>
                        </div>
                        <div>
                            <input
                                className={`${errors.confirmacionEmail ? 'error-input' : 'register-input'}`}
                                placeholder="Confirmacion e-mail"
                                type='email'
                                {...register('confirmacionEmail')}
                                aria-invalid={errors.confirmacionEmail ? "true" : "false"}
                            />
                            <p>{errors.confirmacionEmail?.message}</p>
                        </div>
                        <div>
                            <input
                                className={`${errors.contraseña ? 'error-input' : 'register-input'}`}
                                placeholder="Contraseña"
                                type='password'
                                {...register('password')}
                                aria-invalid={errors.contraseña ? "true" : "false"}
                            />
                            <p>{errors.contraseña?.message}</p>
                        </div>
                        <div>
                            <input
                                className={`${errors.contraseñaConfirmacion ? 'error-input' : 'register-input'}`}
                                placeholder="Confirmacion contraseña"
                                type='password'
                                {...register('contraseñaConfirmacion')}
                                aria-invalid={errors.contraseñaConfirmacion ? "true" : "false"}
                            />
                            <p>{errors.contraseñaConfirmacion?.message}</p>
                        </div>
                    </div>


                    <button className="new-button" type="submit">Registrarse</button>
                </form>
            </div>
            <Modal
                isOpen={showConfirmation}
                onRequestClose={closeModal}
                contentLabel="Confirmacion"
                className="modal"
                style={customStyles}
                shouldCloseOnOverlayClick={false}
            >

                <div className="modal-conteiner">
                    <div className="modal-content-register">
                        {message}
                        {isLoading ? (
                            <BounceLoader
                                color="#36d7b7"
                                speedMultiplier={2}
                                loading
                            />
                        ) : (
                            accepted ? (
                                <img src='./icons/accept.svg' />
                            ) : (
                                <img src='./icons/denied.svg' />
                            )
                        )
                        }
                    </div>
                </div>
            </Modal>
        </div>

    )
}

export default Register;

Archivo: G:\Mochila\DH CTD 1er año\Proyecto Integrador\equipo-9\cine-front\src\routes\ShowMore.jsx

import { useEffect, useState } from "react";
import { showPages } from "../components/UseFetch";
import ContentLoader from "react-content-loader";
import Item from "../components/Item";

function ShowMore() {

    window.scrollTo(0, 0);

    const [isLoading,setIsLoading] = useState(true)
    const [movies,setMovies] = useState()
    const [pages,setPages] = useState(1)
    const [actualPage,setActualPage] = useState(1)

    useEffect(() => {
        const fetchShowMovies = async () => {
            setIsLoading(true);
            try{
                const moviePages = await showPages(actualPage-1);
                setMovies(moviePages.content)
                if(pages != moviePages.totalPages && moviePages.totalPages != null)
                    setPages(moviePages.totalPages)
                setIsLoading(false)
            } catch (error) {
                console.error(error)
                setIsLoading(false)
            }
        }

        fetchShowMovies()
    },[actualPage])

    const handleInputChange = (e) => {
        const newPage = parseInt(e.target.value,10);
        if (newPage >= 1 && newPage < pages){
            setActualPage(newPage)
        }
    }

    const prevPage = () => {
        if(actualPage > 1){
            setActualPage(actualPage - 1)
        }
    }

    const nextPage = () => {
        if(actualPage < pages){
            setActualPage(actualPage + 1)
        }
    }

    const loadingBox = () => {
        const loaders = []
        for (let i=0;i<10;i++){
            loaders.push(
            <div key={i} className="content-loader">
            <ContentLoader
                speed={2}
                width="100%"
                height="100%"
                backgroundColor="#f3f3f3"
                foregroundColor="#ecebeb"
            >
                <rect x="0" y="0" rx="3" ry="3" width="100%" height="100%" />
            </ContentLoader>
            </div>
            )
        }
        return loaders;
    }

    const renderElements = () =>{
        return (
            <div className="page-div">
            <div className="page-container">
                {isLoading ? (
                        loadingBox()
                    )
                    : (
                        Array.isArray(movies) && movies.length > 0 ? (
                            movies.map(movie => (
                                <Item
                                    key={movie.id}
                                    id={movie.id}
                                    name={movie.titulo}
                                    image={movie.portada}
                                />
                            ))
                        ) : (
                            loadingBox()
                        )
                    )
                }
            </div>
            </div>
        )
    }

    const amountOfPages = () =>{
        return (
            <div className="pages">
                <img className='first-button' src="/icons/atras.svgq"onClick={prevPage}/>
                <div className="pages-numbers">
                    <input
                        type="number"
                        readOnly
                        min="1"
                        max={pages}
                        value={actualPage}
                        onChange={handleInputChange}
                        className="input-pages"
                    />
                        <p>de</p>
                        <p>{pages}</p>
                </div>
                <img className='first-button' src="/icons/adelante.svg"onClick={nextPage}/>
            </div>
        )
    }

    return (
        <div className="all-movies">
            {renderElements()}
            {amountOfPages()}
        </div>
    );
}

export default ShowMore;


Archivo: G:\Mochila\DH CTD 1er año\Proyecto Integrador\equipo-9\cine-front\src\routes\SignIn.jsx

import { useEffect, useState } from "react";
import { Link } from "react-router-dom";
import BounceLoader from "react-spinners/BounceLoader"
import { fetchGetUsuario, fetchLogInUser } from '../components/UseFetch'
import { useNavigate } from 'react-router-dom'
import Modal from 'react-modal'
import { set } from "date-fns";


Modal.setAppElement('#root')

function SignIn() {
    const [username, setUsername] = useState("")
    const [password, setPassword] = useState("")
    const [rememberMe, setRememberMe] = useState(false)
    const [showConfirmation, setShowConfirmation] = useState(false);
    const [message, setMessage] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [accepted, setAccepted] = useState(false);
    const navigate = useNavigate()


    const closeModal = () => {
        setShowConfirmation(false)
    }
    const customStyles = {
        overlay: { zIndex: 1000 }
    }
    const onChangeUsername = (e) => setUsername(e.target.value);
    const onChangePassword = (e) => setPassword(e.target.value);
    const onChangeRememberMe = (e) => setRememberMe(e.target.checked)

    const handleSubmit = async (e) => {
        e.preventDefault();
        setShowConfirmation(true)
        setIsLoading(true)



        if (rememberMe) {
            localStorage.setItem('savedEmail', username);
            localStorage.setItem('savedPassword', password);
            localStorage.setItem('rememberMe', rememberMe);
        } else {
            localStorage.removeItem('savedEmail');
            localStorage.removeItem('savedPassword')
            localStorage.removeItem('rememberMe')
        }

        if ((username == '' || null) || (password == '' || null)){
            setIsLoading(false);
            setMessage('Debe ingresar todos los campos');
            setAccepted(false);
            setTimeout(() => {
                setMessage('')
                setShowConfirmation(false);
            }, 3500)
        }

        try {
            const data = {
                email: username,
                password: password,
            }

            const response = await fetchLogInUser(data);


            if (response != false && response != null) {
                console.log(response);
                if (response.includes('no posee')) {
                    setIsLoading(false);
                    setMessage(response);
                    setAccepted(false);
                    setTimeout(() => {
                        setMessage('')
                        setShowConfirmation(false);
                    }, 3500)
                } else {
                    setAccepted(true);
                    const response = await fetchGetUsuario(username)
                    if (response) {
                        console.log(response)
                        setIsLoading(false);
                        setMessage('Ingreso sesion correctamente.')
                        sessionStorage.setItem('nombre', response.nombre)
                        sessionStorage.setItem('apellido', response.apellido)
                        sessionStorage.setItem('email', response.email)
                        sessionStorage.setItem('role', response.roles[0].nombre)
                        setTimeout(() => {
                            setMessage('')
                            setShowConfirmation(false);
                            navigate("/");
                        }, 3000)
                    } else {
                        throw new Error("Error al buscar el usuario");
                    }
                }

            } else {
                setIsLoading(false);
                setMessage('Por favor, verifica tu direccion de correo.')
                setAccepted(false);
                setTimeout(() => {
                    setMessage('')
                    setShowConfirmation(false);
                }, 3000)
            }
        } catch (error) {
            console.log(error)
            setIsLoading(false);
            setMessage("Hubo un error con el servidor. Vuelve a intentarlo.");
            setAccepted(false);
            setTimeout(() => {
                setShowConfirmation(false);
            }, 3500)
        }
    }


    useEffect(() => {
        window.scrollTo(0, 0);
        const savedEmail = localStorage.getItem('savedEmail');
        const savedPassword = localStorage.getItem('savedPassword');
        const savedRememberMe = localStorage.getItem('rememberMe');
        if (savedEmail && savedPassword) {
            setUsername(savedEmail)
            setPassword(savedPassword)
            setRememberMe(savedRememberMe)
        }
    }, [])



    return (
        <div className="sign-in-background">
            <div className="sign-in-container">
                <div className="sign-in">
                    <div className="sign-in-first">
                        <div>
                            <h2>Bienvenido!</h2>
                            <p>Inicia sesion en tu cuenta</p>
                        </div>
                        <form onSubmit={handleSubmit}>
                            <input
                                className="sign-in-inputs"
                                id="input-username"
                                type="email"
                                name="email"
                                placeholder="E-mail"
                                value={username}
                                onChange={onChangeUsername}
                            />
                            <input
                                className="sign-in-inputs"
                                id="input-password"
                                type="password"
                                name="password"
                                placeholder="Contraseña"
                                value={password}
                                onChange={onChangePassword}
                            />
                            <div className="remember-me">
                                <label>
                                    <input
                                        type="checkbox"
                                        checked={rememberMe}
                                        onChange={onChangeRememberMe}
                                    />
                                    Recordarme
                                </label>
                                <a>¿Olvidaste tu contraseña?</a>
                            </div>


                            <button className="new-button" type="submit">Iniciar Sesión</button>
                        </form>
                        <div className="register-div">
                            <p>Todavia no tienes cuenta?</p>
                            <Link to="../registrarse">
                                Registrate
                            </Link>
                        </div>
                    </div>
                    <div className="sign-in-second">
                        <h3>Bienvenido de vuelta!</h3>
                        <p>Disfruta de los estrenos y las mejores peliculas en nuestros cines. Inicia sesion para obtener ya tu reserva!</p>
                    </div>
                </div>

            </div>
            <Modal
                isOpen={showConfirmation}
                onRequestClose={closeModal}
                contentLabel="Confirmacion"
                className="modal"
                style={customStyles}
                shouldCloseOnOverlayClick={false}
            >

                <div className="modal-conteiner">
                    <div className="modal-content-register">
                        {message}
                        {isLoading ? (
                            <BounceLoader
                                color="#36d7b7"
                                speedMultiplier={2}
                                loading
                            />
                        ) : (
                            accepted ? (
                                <img src='./icons/accept.svg' />
                            ) : (
                                <img src='./icons/denied.svg' />
                            )
                        )
                        }
                    </div>
                </div>
            </Modal>
        </div>

    )
}

export default SignIn;

Archivo: G:\Mochila\DH CTD 1er año\Proyecto Integrador\equipo-9\cine-front\src\routes\SignOut.jsx

import { useState } from "react";
import { Link } from "react-router-dom";
import CerrarSesion from "../components/CerrarSesion";

function SignOut() {
  const [isSesionCerrada, setSesionCerrada] = useState(false);

  const handleSignOut = () => {
    // Clear authentication data
    // Perform additional sign-out actions
    setSesionCerrada(true);
    
  };

  return (
    <div className="signOut">
      <h2>Seguro que quieres cerrar sesión?</h2>
      <p>Tendrás que cargar tus datos de nuevo.</p> 
      <Link to="/">
        <button>NO </button>
      </Link>
      
      <a href="/"><button onClick={handleSignOut}>SI</button></a>
      {isSesionCerrada && <CerrarSesion />}
      
    </div>
  );
}

export default SignOut;

